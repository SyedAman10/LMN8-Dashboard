{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/erpai/projects/UI/luminate-clinician/src/lib/db.js"],"sourcesContent":["import { Pool } from '@neondatabase/serverless';\r\n\r\n// Get database connection string\r\nconst connectionString = process.env.DATABASE_URL || process.env.NEON_DATABASE_URL;\r\n\r\nif (!connectionString) {\r\n  console.error('❌ DATABASE_URL environment variable is not set!');\r\n  console.error('Please set DATABASE_URL in your .env.local file with your Neon database connection string.');\r\n  console.error('Example: DATABASE_URL=postgresql://username:password@ep-xxx-xxx.us-east-1.aws.neon.tech/neondb?sslmode=require');\r\n}\r\n\r\n// Create a connection pool\r\nconst pool = new Pool({\r\n  connectionString: connectionString,\r\n});\r\n\r\n// Test the database connection\r\nexport async function testConnection() {\r\n  try {\r\n    const client = await pool.connect();\r\n    const result = await client.query('SELECT NOW()');\r\n    client.release();\r\n    console.log('Database connected successfully:', result.rows[0]);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Database connection failed:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Execute a query with error handling\r\nexport async function query(text, params) {\r\n  if (!connectionString) {\r\n    throw new Error('Database connection string not configured. Please set DATABASE_URL environment variable.');\r\n  }\r\n  \r\n  const client = await pool.connect();\r\n  try {\r\n    const result = await client.query(text, params);\r\n    return result;\r\n  } catch (error) {\r\n    console.error('Database query error:', error);\r\n    console.error('Query:', text);\r\n    console.error('Params:', params);\r\n    throw error;\r\n  } finally {\r\n    client.release();\r\n  }\r\n}\r\n\r\n// Initialize database schema\r\nexport async function initDatabase() {\r\n  try {\r\n    // Check if database is configured\r\n    if (!connectionString) {\r\n      throw new Error('Database connection string not configured. Please set DATABASE_URL environment variable.');\r\n    }\r\n\r\n    console.log('🔍 Checking database connection...');\r\n    const connected = await testConnection();\r\n    if (!connected) {\r\n      throw new Error('Database connection failed');\r\n    }\r\n\r\n    console.log('📋 Initializing database schema...');\r\n    \r\n    // Create users table first\r\n    console.log('   Creating users table...');\r\n    await query(`\r\n      CREATE TABLE IF NOT EXISTS users (\r\n        id SERIAL PRIMARY KEY,\r\n        email VARCHAR(255) UNIQUE NOT NULL,\r\n        password_hash VARCHAR(255) NOT NULL,\r\n        first_name VARCHAR(100) NOT NULL,\r\n        last_name VARCHAR(100) NOT NULL,\r\n        role VARCHAR(50) NOT NULL,\r\n        license_number VARCHAR(100),\r\n        is_active BOOLEAN DEFAULT true,\r\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n      )\r\n    `);\r\n    console.log('   ✅ Users table created');\r\n\r\n    // Create sessions table for JWT session management\r\n    console.log('   Creating user_sessions table...');\r\n    await query(`\r\n      CREATE TABLE IF NOT EXISTS user_sessions (\r\n        id SERIAL PRIMARY KEY,\r\n        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,\r\n        session_token VARCHAR(255) UNIQUE NOT NULL,\r\n        expires_at TIMESTAMP NOT NULL,\r\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n      )\r\n    `);\r\n    console.log('   ✅ User sessions table created');\r\n\r\n    // Create patients table\r\n    console.log('   Creating patients table...');\r\n    await query(`\r\n      CREATE TABLE IF NOT EXISTS patients (\r\n        id SERIAL PRIMARY KEY,\r\n        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,\r\n        name VARCHAR(255) NOT NULL,\r\n        email VARCHAR(255),\r\n        phone VARCHAR(20),\r\n        date_of_birth DATE,\r\n        diagnosis TEXT,\r\n        medical_history TEXT,\r\n        emergency_contact VARCHAR(255),\r\n        emergency_phone VARCHAR(20),\r\n        therapist VARCHAR(255),\r\n        total_sessions INTEGER DEFAULT 12,\r\n        sessions_completed INTEGER DEFAULT 0,\r\n        status VARCHAR(50) DEFAULT 'active',\r\n        notes TEXT,\r\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n      )\r\n    `);\r\n    console.log('   ✅ Patients table created');\r\n\r\n    // Create indexes for better performance\r\n    console.log('   Creating indexes...');\r\n    try {\r\n      await query(`CREATE INDEX IF NOT EXISTS idx_users_email ON users(email)`);\r\n      await query(`CREATE INDEX IF NOT EXISTS idx_sessions_token ON user_sessions(session_token)`);\r\n      await query(`CREATE INDEX IF NOT EXISTS idx_patients_user_id ON patients(user_id)`);\r\n      console.log('   ✅ Indexes created');\r\n    } catch (indexError) {\r\n      console.log('   ⚠️  Some indexes may already exist:', indexError.message);\r\n    }\r\n\r\n    console.log('✅ Database schema initialized successfully');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('❌ Database initialization failed:', error);\r\n    console.error('Error details:', {\r\n      message: error.message,\r\n      code: error.code,\r\n      detail: error.detail\r\n    });\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport default pool;\r\n"],"names":[],"mappings":";;;;;;;;;;AAAA;;AAEA,iCAAiC;AACjC,MAAM,mBAAmB,QAAQ,GAAG,CAAC,YAAY,IAAI,QAAQ,GAAG,CAAC,iBAAiB;AAElF,IAAI,CAAC,kBAAkB;IACrB,QAAQ,KAAK,CAAC;IACd,QAAQ,KAAK,CAAC;IACd,QAAQ,KAAK,CAAC;AAChB;AAEA,2BAA2B;AAC3B,MAAM,OAAO,IAAI,gKAAI,CAAC;IACpB,kBAAkB;AACpB;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,KAAK,OAAO;QACjC,MAAM,SAAS,MAAM,OAAO,KAAK,CAAC;QAClC,OAAO,OAAO;QACd,QAAQ,GAAG,CAAC,oCAAoC,OAAO,IAAI,CAAC,EAAE;QAC9D,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO;IACT;AACF;AAGO,eAAe,MAAM,IAAI,EAAE,MAAM;IACtC,IAAI,CAAC,kBAAkB;QACrB,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,SAAS,MAAM,KAAK,OAAO;IACjC,IAAI;QACF,MAAM,SAAS,MAAM,OAAO,KAAK,CAAC,MAAM;QACxC,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,QAAQ,KAAK,CAAC,UAAU;QACxB,QAAQ,KAAK,CAAC,WAAW;QACzB,MAAM;IACR,SAAU;QACR,OAAO,OAAO;IAChB;AACF;AAGO,eAAe;IACpB,IAAI;QACF,kCAAkC;QAClC,IAAI,CAAC,kBAAkB;YACrB,MAAM,IAAI,MAAM;QAClB;QAEA,QAAQ,GAAG,CAAC;QACZ,MAAM,YAAY,MAAM;QACxB,IAAI,CAAC,WAAW;YACd,MAAM,IAAI,MAAM;QAClB;QAEA,QAAQ,GAAG,CAAC;QAEZ,2BAA2B;QAC3B,QAAQ,GAAG,CAAC;QACZ,MAAM,MAAM,CAAC;;;;;;;;;;;;;IAab,CAAC;QACD,QAAQ,GAAG,CAAC;QAEZ,mDAAmD;QACnD,QAAQ,GAAG,CAAC;QACZ,MAAM,MAAM,CAAC;;;;;;;;IAQb,CAAC;QACD,QAAQ,GAAG,CAAC;QAEZ,wBAAwB;QACxB,QAAQ,GAAG,CAAC;QACZ,MAAM,MAAM,CAAC;;;;;;;;;;;;;;;;;;;;IAoBb,CAAC;QACD,QAAQ,GAAG,CAAC;QAEZ,wCAAwC;QACxC,QAAQ,GAAG,CAAC;QACZ,IAAI;YACF,MAAM,MAAM,CAAC,0DAA0D,CAAC;YACxE,MAAM,MAAM,CAAC,6EAA6E,CAAC;YAC3F,MAAM,MAAM,CAAC,oEAAoE,CAAC;YAClF,QAAQ,GAAG,CAAC;QACd,EAAE,OAAO,YAAY;YACnB,QAAQ,GAAG,CAAC,0CAA0C,WAAW,OAAO;QAC1E;QAEA,QAAQ,GAAG,CAAC;QACZ,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,QAAQ,KAAK,CAAC,kBAAkB;YAC9B,SAAS,MAAM,OAAO;YACtB,MAAM,MAAM,IAAI;YAChB,QAAQ,MAAM,MAAM;QACtB;QACA,MAAM;IACR;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 205, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/erpai/projects/UI/luminate-clinician/src/lib/auth.js"],"sourcesContent":["import bcrypt from 'bcryptjs';\r\nimport { query } from './db.js';\r\n\r\n// Hash password\r\nexport async function hashPassword(password) {\r\n  const saltRounds = 12;\r\n  return await bcrypt.hash(password, saltRounds);\r\n}\r\n\r\n// Verify password\r\nexport async function verifyPassword(password, hashedPassword) {\r\n  return await bcrypt.compare(password, hashedPassword);\r\n}\r\n\r\n// Generate a simple session token (in production, use a proper JWT library)\r\nexport function generateSessionToken() {\r\n  return Math.random().toString(36).substring(2) + Date.now().toString(36);\r\n}\r\n\r\n// Create user session\r\nexport async function createUserSession(userId) {\r\n  const sessionToken = generateSessionToken();\r\n  const expiresAt = new Date();\r\n  expiresAt.setDate(expiresAt.getDate() + 7); // 7 days from now\r\n\r\n  await query(\r\n    'INSERT INTO user_sessions (user_id, session_token, expires_at) VALUES ($1, $2, $3)',\r\n    [userId, sessionToken, expiresAt]\r\n  );\r\n\r\n  return sessionToken;\r\n}\r\n\r\n// Get user by session token\r\nexport async function getUserBySession(sessionToken) {\r\n  const result = await query(\r\n    `SELECT u.*, s.expires_at \r\n     FROM users u \r\n     JOIN user_sessions s ON u.id = s.user_id \r\n     WHERE s.session_token = $1 AND s.expires_at > NOW() AND u.is_active = true`,\r\n    [sessionToken]\r\n  );\r\n\r\n  return result.rows[0] || null;\r\n}\r\n\r\n// Clean up expired sessions\r\nexport async function cleanupExpiredSessions() {\r\n  await query('DELETE FROM user_sessions WHERE expires_at < NOW()');\r\n}\r\n\r\n// Get user by email\r\nexport async function getUserByEmail(email) {\r\n  const result = await query(\r\n    'SELECT * FROM users WHERE email = $1 AND is_active = true',\r\n    [email]\r\n  );\r\n  return result.rows[0] || null;\r\n}\r\n\r\n// Create new user\r\nexport async function createUser(userData) {\r\n  const { firstName, lastName, email, password, role, licenseNumber } = userData;\r\n  \r\n  const passwordHash = await hashPassword(password);\r\n  \r\n  const result = await query(\r\n    `INSERT INTO users (first_name, last_name, email, password_hash, role, license_number) \r\n     VALUES ($1, $2, $3, $4, $5, $6) \r\n     RETURNING id, first_name, last_name, email, role, created_at`,\r\n    [firstName, lastName, email, passwordHash, role, licenseNumber || null]\r\n  );\r\n\r\n  return result.rows[0];\r\n}\r\n\r\n// Validate user credentials\r\nexport async function validateUser(email, password) {\r\n  const user = await getUserByEmail(email);\r\n  if (!user) {\r\n    return null;\r\n  }\r\n\r\n  const isValidPassword = await verifyPassword(password, user.password_hash);\r\n  if (!isValidPassword) {\r\n    return null;\r\n  }\r\n\r\n  // Return user without password hash\r\n  const { password_hash, ...userWithoutPassword } = user;\r\n  return userWithoutPassword;\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;;;AAGO,eAAe,aAAa,QAAQ;IACzC,MAAM,aAAa;IACnB,OAAO,MAAM,8IAAM,CAAC,IAAI,CAAC,UAAU;AACrC;AAGO,eAAe,eAAe,QAAQ,EAAE,cAAc;IAC3D,OAAO,MAAM,8IAAM,CAAC,OAAO,CAAC,UAAU;AACxC;AAGO,SAAS;IACd,OAAO,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,KAAK,KAAK,GAAG,GAAG,QAAQ,CAAC;AACvE;AAGO,eAAe,kBAAkB,MAAM;IAC5C,MAAM,eAAe;IACrB,MAAM,YAAY,IAAI;IACtB,UAAU,OAAO,CAAC,UAAU,OAAO,KAAK,IAAI,kBAAkB;IAE9D,MAAM,IAAA,2HAAK,EACT,sFACA;QAAC;QAAQ;QAAc;KAAU;IAGnC,OAAO;AACT;AAGO,eAAe,iBAAiB,YAAY;IACjD,MAAM,SAAS,MAAM,IAAA,2HAAK,EACxB,CAAC;;;+EAG0E,CAAC,EAC5E;QAAC;KAAa;IAGhB,OAAO,OAAO,IAAI,CAAC,EAAE,IAAI;AAC3B;AAGO,eAAe;IACpB,MAAM,IAAA,2HAAK,EAAC;AACd;AAGO,eAAe,eAAe,KAAK;IACxC,MAAM,SAAS,MAAM,IAAA,2HAAK,EACxB,6DACA;QAAC;KAAM;IAET,OAAO,OAAO,IAAI,CAAC,EAAE,IAAI;AAC3B;AAGO,eAAe,WAAW,QAAQ;IACvC,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG;IAEtE,MAAM,eAAe,MAAM,aAAa;IAExC,MAAM,SAAS,MAAM,IAAA,2HAAK,EACxB,CAAC;;iEAE4D,CAAC,EAC9D;QAAC;QAAW;QAAU;QAAO;QAAc;QAAM,iBAAiB;KAAK;IAGzE,OAAO,OAAO,IAAI,CAAC,EAAE;AACvB;AAGO,eAAe,aAAa,KAAK,EAAE,QAAQ;IAChD,MAAM,OAAO,MAAM,eAAe;IAClC,IAAI,CAAC,MAAM;QACT,OAAO;IACT;IAEA,MAAM,kBAAkB,MAAM,eAAe,UAAU,KAAK,aAAa;IACzE,IAAI,CAAC,iBAAiB;QACpB,OAAO;IACT;IAEA,oCAAoC;IACpC,MAAM,EAAE,aAAa,EAAE,GAAG,qBAAqB,GAAG;IAClD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 300, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/erpai/projects/UI/luminate-clinician/src/app/api/auth/signup/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { createUser, getUserByEmail } from '@/lib/auth';\r\nimport { initDatabase } from '@/lib/db';\r\n\r\nexport async function POST(request) {\r\n  try {\r\n    // Check if database is configured\r\n    if (!process.env.DATABASE_URL && !process.env.NEON_DATABASE_URL) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Database not configured. Please set DATABASE_URL environment variable.',\r\n          details: 'Contact your administrator or check the setup documentation.'\r\n        },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Initialize database if needed\r\n    await initDatabase();\r\n\r\n    const body = await request.json();\r\n    const { firstName, lastName, email, password, role, licenseNumber } = body;\r\n\r\n    // Validate required fields\r\n    if (!firstName || !lastName || !email || !password || !role) {\r\n      return NextResponse.json(\r\n        { error: 'Missing required fields' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Validate email format\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(email)) {\r\n      return NextResponse.json(\r\n        { error: 'Invalid email format' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Validate password strength\r\n    if (password.length < 8) {\r\n      return NextResponse.json(\r\n        { error: 'Password must be at least 8 characters long' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Check if user already exists\r\n    const existingUser = await getUserByEmail(email);\r\n    if (existingUser) {\r\n      return NextResponse.json(\r\n        { error: 'User with this email already exists' },\r\n        { status: 409 }\r\n      );\r\n    }\r\n\r\n    // Validate role-specific requirements\r\n    if (role === 'clinician' && !licenseNumber) {\r\n      return NextResponse.json(\r\n        { error: 'License number is required for clinicians' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Create user\r\n    const newUser = await createUser({\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      password,\r\n      role,\r\n      licenseNumber\r\n    });\r\n\r\n    return NextResponse.json(\r\n      {\r\n        message: 'User created successfully',\r\n        user: {\r\n          id: newUser.id,\r\n          firstName: newUser.first_name,\r\n          lastName: newUser.last_name,\r\n          email: newUser.email,\r\n          role: newUser.role,\r\n          createdAt: newUser.created_at\r\n        }\r\n      },\r\n      { status: 201 }\r\n    );\r\n\r\n  } catch (error) {\r\n    console.error('Signup error:', error);\r\n    \r\n    // Provide more specific error messages\r\n    if (error.message.includes('connection string not configured')) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Database not configured',\r\n          details: 'Please set DATABASE_URL environment variable'\r\n        },\r\n        { status: 500 }\r\n      );\r\n    }\r\n    \r\n    if (error.message.includes('Database connection failed')) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Database connection failed',\r\n          details: 'Please check your database connection string'\r\n        },\r\n        { status: 500 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        error: 'Internal server error',\r\n        details: error.message\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,kCAAkC;QAClC,IAAI,CAAC,QAAQ,GAAG,CAAC,YAAY,IAAI,CAAC,QAAQ,GAAG,CAAC,iBAAiB,EAAE;YAC/D,OAAO,gJAAY,CAAC,IAAI,CACtB;gBACE,OAAO;gBACP,SAAS;YACX,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,gCAAgC;QAChC,MAAM,IAAA,kIAAY;QAElB,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG;QAEtE,2BAA2B;QAC3B,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM;YAC3D,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,wBAAwB;QACxB,MAAM,aAAa;QACnB,IAAI,CAAC,WAAW,IAAI,CAAC,QAAQ;YAC3B,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuB,GAChC;gBAAE,QAAQ;YAAI;QAElB;QAEA,6BAA6B;QAC7B,IAAI,SAAS,MAAM,GAAG,GAAG;YACvB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA8C,GACvD;gBAAE,QAAQ;YAAI;QAElB;QAEA,+BAA+B;QAC/B,MAAM,eAAe,MAAM,IAAA,sIAAc,EAAC;QAC1C,IAAI,cAAc;YAChB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsC,GAC/C;gBAAE,QAAQ;YAAI;QAElB;QAEA,sCAAsC;QACtC,IAAI,SAAS,eAAe,CAAC,eAAe;YAC1C,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA4C,GACrD;gBAAE,QAAQ;YAAI;QAElB;QAEA,cAAc;QACd,MAAM,UAAU,MAAM,IAAA,kIAAU,EAAC;YAC/B;YACA;YACA;YACA;YACA;YACA;QACF;QAEA,OAAO,gJAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,MAAM;gBACJ,IAAI,QAAQ,EAAE;gBACd,WAAW,QAAQ,UAAU;gBAC7B,UAAU,QAAQ,SAAS;gBAC3B,OAAO,QAAQ,KAAK;gBACpB,MAAM,QAAQ,IAAI;gBAClB,WAAW,QAAQ,UAAU;YAC/B;QACF,GACA;YAAE,QAAQ;QAAI;IAGlB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iBAAiB;QAE/B,uCAAuC;QACvC,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,qCAAqC;YAC9D,OAAO,gJAAY,CAAC,IAAI,CACtB;gBACE,OAAO;gBACP,SAAS;YACX,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,+BAA+B;YACxD,OAAO,gJAAY,CAAC,IAAI,CACtB;gBACE,OAAO;gBACP,SAAS;YACX,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gJAAY,CAAC,IAAI,CACtB;YACE,OAAO;YACP,SAAS,MAAM,OAAO;QACxB,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}