{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/erpai/projects/UI/luminate-clinician/src/lib/db.js"],"sourcesContent":["import { Pool } from '@neondatabase/serverless';\nimport dotenv from 'dotenv';\n\n// Load environment variables\ndotenv.config({ path: '.env.local' });\n\n// Get database connection string\nconst connectionString = process.env.DATABASE_URL || process.env.NEON_DATABASE_URL;\n\nif (!connectionString) {\n  console.error('‚ùå DATABASE_URL environment variable is not set!');\n  console.error('Please set DATABASE_URL in your .env.local file with your Neon database connection string.');\n  console.error('Example: DATABASE_URL=postgresql://username:password@ep-xxx-xxx.us-east-1.aws.neon.tech/neondb?sslmode=require');\n}\n\n// Create a connection pool\nconst pool = new Pool({\n  connectionString: connectionString,\n});\n\n// Test the database connection\nexport async function testConnection() {\n  try {\n    const client = await pool.connect();\n    const result = await client.query('SELECT NOW()');\n    client.release();\n    console.log('Database connected successfully:', result.rows[0]);\n    return true;\n  } catch (error) {\n    console.error('Database connection failed:', error);\n    return false;\n  }\n}\n\n// Execute a query with error handling\nexport async function query(text, params) {\n  if (!connectionString) {\n    throw new Error('Database connection string not configured. Please set DATABASE_URL environment variable.');\n  }\n  \n  const client = await pool.connect();\n  try {\n    const result = await client.query(text, params);\n    return result;\n  } catch (error) {\n    console.error('Database query error:', error);\n    console.error('Query:', text);\n    console.error('Params:', params);\n    throw error;\n  } finally {\n    client.release();\n  }\n}\n\n// Initialize database schema\nexport async function initDatabase() {\n  try {\n    // Check if database is configured\n    if (!connectionString) {\n      throw new Error('Database connection string not configured. Please set DATABASE_URL environment variable.');\n    }\n\n    console.log('üîç Checking database connection...');\n    const connected = await testConnection();\n    if (!connected) {\n      throw new Error('Database connection failed');\n    }\n\n    console.log('üìã Initializing database schema...');\n    \n    // Create users table first\n    console.log('   Creating users table...');\n    await query(`\n      CREATE TABLE IF NOT EXISTS users (\n        id SERIAL PRIMARY KEY,\n        email VARCHAR(255) UNIQUE NOT NULL,\n        password_hash VARCHAR(255) NOT NULL,\n        first_name VARCHAR(100) NOT NULL,\n        last_name VARCHAR(100) NOT NULL,\n        role VARCHAR(50) NOT NULL,\n        license_number VARCHAR(100),\n        is_active BOOLEAN DEFAULT true,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n    console.log('   ‚úÖ Users table created');\n\n    // Create sessions table for JWT session management\n    console.log('   Creating user_sessions table...');\n    await query(`\n      CREATE TABLE IF NOT EXISTS user_sessions (\n        id SERIAL PRIMARY KEY,\n        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,\n        session_token VARCHAR(255) UNIQUE NOT NULL,\n        expires_at TIMESTAMP NOT NULL,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n    console.log('   ‚úÖ User sessions table created');\n\n    // Create patients table\n    console.log('   Creating patients table...');\n    await query(`\n      CREATE TABLE IF NOT EXISTS patients (\n        id SERIAL PRIMARY KEY,\n        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,\n        name VARCHAR(255) NOT NULL,\n        email VARCHAR(255),\n        phone VARCHAR(20),\n        date_of_birth DATE,\n        diagnosis TEXT,\n        medical_history TEXT,\n        emergency_contact VARCHAR(255),\n        emergency_phone VARCHAR(20),\n        therapist VARCHAR(255),\n        total_sessions INTEGER DEFAULT 12,\n        sessions_completed INTEGER DEFAULT 0,\n        status VARCHAR(50) DEFAULT 'active',\n        notes TEXT,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n    console.log('   ‚úÖ Patients table created');\n\n    // Create patient_users table for patient authentication\n    console.log('   Creating patient_users table...');\n    await query(`\n      CREATE TABLE IF NOT EXISTS patient_users (\n        id SERIAL PRIMARY KEY,\n        patient_id INTEGER REFERENCES patients(id) ON DELETE CASCADE,\n        username VARCHAR(50) UNIQUE NOT NULL,\n        password_hash VARCHAR(255) NOT NULL,\n        is_active BOOLEAN DEFAULT true,\n        last_login TIMESTAMP,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        idol TEXT,\n        personality TEXT,\n        goals TEXT,\n        challenges TEXT,\n        communication_style TEXT,\n        interests TEXT,\n        values TEXT,\n        support_needs TEXT\n      )\n    `);\n    console.log('   ‚úÖ Patient users table created');\n\n    // Create indexes for better performance\n    console.log('   Creating indexes...');\n    try {\n      await query(`CREATE INDEX IF NOT EXISTS idx_users_email ON users(email)`);\n      await query(`CREATE INDEX IF NOT EXISTS idx_sessions_token ON user_sessions(session_token)`);\n      await query(`CREATE INDEX IF NOT EXISTS idx_patients_user_id ON patients(user_id)`);\n      await query(`CREATE INDEX IF NOT EXISTS idx_patient_users_username ON patient_users(username)`);\n      await query(`CREATE INDEX IF NOT EXISTS idx_patient_users_patient_id ON patient_users(patient_id)`);\n      console.log('   ‚úÖ Indexes created');\n    } catch (indexError) {\n      console.log('   ‚ö†Ô∏è  Some indexes may already exist:', indexError.message);\n    }\n\n    console.log('‚úÖ Database schema initialized successfully');\n    return true;\n  } catch (error) {\n    console.error('‚ùå Database initialization failed:', error);\n    console.error('Error details:', {\n      message: error.message,\n      code: error.code,\n      detail: error.detail\n    });\n    throw error;\n  }\n}\n\nexport default pool;\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;;;AAEA,6BAA6B;AAC7B,kJAAM,CAAC,MAAM,CAAC;IAAE,MAAM;AAAa;AAEnC,iCAAiC;AACjC,MAAM,mBAAmB,QAAQ,GAAG,CAAC,YAAY,IAAI,QAAQ,GAAG,CAAC,iBAAiB;AAElF,IAAI,CAAC,kBAAkB;IACrB,QAAQ,KAAK,CAAC;IACd,QAAQ,KAAK,CAAC;IACd,QAAQ,KAAK,CAAC;AAChB;AAEA,2BAA2B;AAC3B,MAAM,OAAO,IAAI,gKAAI,CAAC;IACpB,kBAAkB;AACpB;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,KAAK,OAAO;QACjC,MAAM,SAAS,MAAM,OAAO,KAAK,CAAC;QAClC,OAAO,OAAO;QACd,QAAQ,GAAG,CAAC,oCAAoC,OAAO,IAAI,CAAC,EAAE;QAC9D,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO;IACT;AACF;AAGO,eAAe,MAAM,IAAI,EAAE,MAAM;IACtC,IAAI,CAAC,kBAAkB;QACrB,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,SAAS,MAAM,KAAK,OAAO;IACjC,IAAI;QACF,MAAM,SAAS,MAAM,OAAO,KAAK,CAAC,MAAM;QACxC,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,QAAQ,KAAK,CAAC,UAAU;QACxB,QAAQ,KAAK,CAAC,WAAW;QACzB,MAAM;IACR,SAAU;QACR,OAAO,OAAO;IAChB;AACF;AAGO,eAAe;IACpB,IAAI;QACF,kCAAkC;QAClC,IAAI,CAAC,kBAAkB;YACrB,MAAM,IAAI,MAAM;QAClB;QAEA,QAAQ,GAAG,CAAC;QACZ,MAAM,YAAY,MAAM;QACxB,IAAI,CAAC,WAAW;YACd,MAAM,IAAI,MAAM;QAClB;QAEA,QAAQ,GAAG,CAAC;QAEZ,2BAA2B;QAC3B,QAAQ,GAAG,CAAC;QACZ,MAAM,MAAM,CAAC;;;;;;;;;;;;;IAab,CAAC;QACD,QAAQ,GAAG,CAAC;QAEZ,mDAAmD;QACnD,QAAQ,GAAG,CAAC;QACZ,MAAM,MAAM,CAAC;;;;;;;;IAQb,CAAC;QACD,QAAQ,GAAG,CAAC;QAEZ,wBAAwB;QACxB,QAAQ,GAAG,CAAC;QACZ,MAAM,MAAM,CAAC;;;;;;;;;;;;;;;;;;;;IAoBb,CAAC;QACD,QAAQ,GAAG,CAAC;QAEZ,wDAAwD;QACxD,QAAQ,GAAG,CAAC;QACZ,MAAM,MAAM,CAAC;;;;;;;;;;;;;;;;;;;IAmBb,CAAC;QACD,QAAQ,GAAG,CAAC;QAEZ,wCAAwC;QACxC,QAAQ,GAAG,CAAC;QACZ,IAAI;YACF,MAAM,MAAM,CAAC,0DAA0D,CAAC;YACxE,MAAM,MAAM,CAAC,6EAA6E,CAAC;YAC3F,MAAM,MAAM,CAAC,oEAAoE,CAAC;YAClF,MAAM,MAAM,CAAC,gFAAgF,CAAC;YAC9F,MAAM,MAAM,CAAC,oFAAoF,CAAC;YAClG,QAAQ,GAAG,CAAC;QACd,EAAE,OAAO,YAAY;YACnB,QAAQ,GAAG,CAAC,0CAA0C,WAAW,OAAO;QAC1E;QAEA,QAAQ,GAAG,CAAC;QACZ,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,QAAQ,KAAK,CAAC,kBAAkB;YAC9B,SAAS,MAAM,OAAO;YACtB,MAAM,MAAM,IAAI;YAChB,QAAQ,MAAM,MAAM;QACtB;QACA,MAAM;IACR;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 272, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/erpai/projects/UI/luminate-clinician/src/app/api/patient-auth/profile/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport jwt from 'jsonwebtoken';\r\nimport { query } from '@/lib/db';\r\n\r\n// GET - Get patient profile fields\r\nexport async function GET(request) {\r\n  try {\r\n    const token = request.cookies.get('patient_token')?.value;\r\n\r\n    if (!token) {\r\n      return NextResponse.json(\r\n        { error: 'Not authenticated' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Verify JWT token\r\n    let decoded;\r\n    try {\r\n      decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n    } catch (error) {\r\n      return NextResponse.json(\r\n        { error: 'Invalid or expired token' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Check if token is for patient\r\n    if (decoded.type !== 'patient') {\r\n      return NextResponse.json(\r\n        { error: 'Invalid token type' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Get patient profile fields\r\n    const result = await query(\r\n      `SELECT \r\n        pu.idol, pu.personality, pu.goals, pu.challenges,\r\n        pu.communication_style, pu.interests, pu.values, pu.support_needs,\r\n        pu.updated_at\r\n       FROM patient_users pu\r\n       WHERE pu.patient_id = $1 AND pu.is_active = true`,\r\n      [decoded.patientId]\r\n    );\r\n\r\n    if (result.rows.length === 0) {\r\n      return NextResponse.json(\r\n        { error: 'Patient profile not found' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    const profile = result.rows[0];\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      profile: {\r\n        idol: profile.idol,\r\n        personality: profile.personality,\r\n        goals: profile.goals,\r\n        challenges: profile.challenges,\r\n        communicationStyle: profile.communication_style,\r\n        interests: profile.interests,\r\n        values: profile.values,\r\n        supportNeeds: profile.support_needs,\r\n        updatedAt: profile.updated_at\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Get patient profile error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// PUT - Update patient profile fields\r\nexport async function PUT(request) {\r\n  try {\r\n    const token = request.cookies.get('patient_token')?.value;\r\n\r\n    if (!token) {\r\n      return NextResponse.json(\r\n        { error: 'Not authenticated' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Verify JWT token\r\n    let decoded;\r\n    try {\r\n      decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n    } catch (error) {\r\n      return NextResponse.json(\r\n        { error: 'Invalid or expired token' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Check if token is for patient\r\n    if (decoded.type !== 'patient') {\r\n      return NextResponse.json(\r\n        { error: 'Invalid token type' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const body = await request.json();\r\n    const {\r\n      idol,\r\n      personality,\r\n      goals,\r\n      challenges,\r\n      communicationStyle,\r\n      interests,\r\n      values,\r\n      supportNeeds\r\n    } = body;\r\n\r\n    // Build dynamic update query based on provided fields\r\n    const updateFields = [];\r\n    const updateValues = [];\r\n    let paramCount = 1;\r\n\r\n    if (idol !== undefined) {\r\n      updateFields.push(`idol = $${paramCount}`);\r\n      updateValues.push(idol);\r\n      paramCount++;\r\n    }\r\n    if (personality !== undefined) {\r\n      updateFields.push(`personality = $${paramCount}`);\r\n      updateValues.push(personality);\r\n      paramCount++;\r\n    }\r\n    if (goals !== undefined) {\r\n      updateFields.push(`goals = $${paramCount}`);\r\n      updateValues.push(goals);\r\n      paramCount++;\r\n    }\r\n    if (challenges !== undefined) {\r\n      updateFields.push(`challenges = $${paramCount}`);\r\n      updateValues.push(challenges);\r\n      paramCount++;\r\n    }\r\n    if (communicationStyle !== undefined) {\r\n      updateFields.push(`communication_style = $${paramCount}`);\r\n      updateValues.push(communicationStyle);\r\n      paramCount++;\r\n    }\r\n    if (interests !== undefined) {\r\n      updateFields.push(`interests = $${paramCount}`);\r\n      updateValues.push(interests);\r\n      paramCount++;\r\n    }\r\n    if (values !== undefined) {\r\n      updateFields.push(`values = $${paramCount}`);\r\n      updateValues.push(values);\r\n      paramCount++;\r\n    }\r\n    if (supportNeeds !== undefined) {\r\n      updateFields.push(`support_needs = $${paramCount}`);\r\n      updateValues.push(supportNeeds);\r\n      paramCount++;\r\n    }\r\n\r\n    if (updateFields.length === 0) {\r\n      return NextResponse.json(\r\n        { error: 'No fields provided for update' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Add updated_at and patient_id\r\n    updateFields.push(`updated_at = CURRENT_TIMESTAMP`);\r\n    updateValues.push(decoded.patientId);\r\n\r\n    const updateQuery = `\r\n      UPDATE patient_users \r\n      SET ${updateFields.join(', ')}\r\n      WHERE patient_id = $${paramCount} AND is_active = true\r\n      RETURNING idol, personality, goals, challenges, communication_style, interests, values, support_needs, updated_at\r\n    `;\r\n\r\n    const result = await query(updateQuery, updateValues);\r\n\r\n    if (result.rows.length === 0) {\r\n      return NextResponse.json(\r\n        { error: 'Patient profile not found' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    const updatedProfile = result.rows[0];\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Profile updated successfully',\r\n      profile: {\r\n        idol: updatedProfile.idol,\r\n        personality: updatedProfile.personality,\r\n        goals: updatedProfile.goals,\r\n        challenges: updatedProfile.challenges,\r\n        communicationStyle: updatedProfile.communication_style,\r\n        interests: updatedProfile.interests,\r\n        values: updatedProfile.values,\r\n        supportNeeds: updatedProfile.support_needs,\r\n        updatedAt: updatedProfile.updated_at\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Update patient profile error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}