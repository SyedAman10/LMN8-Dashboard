{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/erpai/projects/UI/luminate-clinician/src/lib/database/indexeddb.js"],"sourcesContent":["import Dexie from 'dexie';\r\n\r\n// IndexedDB configuration for offline storage\r\nexport const db = new Dexie('LuminateClinicianDB');\r\n\r\n// Define database schema\r\ndb.version(1).stores({\r\n  users: '++id, email, firstName, lastName, role, licenseNumber, passwordHash, createdAt, updatedAt, isOnline',\r\n  patients: '++id, name, email, phone, dateOfBirth, diagnosis, medicalHistory, emergencyContact, emergencyPhone, therapist, totalSessions, notes, status, lastSession, nextSession, progress, sessionsCompleted, createdAt, updatedAt, isOnline',\r\n  sessions: '++id, patientId, therapistId, date, duration, type, notes, status, createdAt, updatedAt, isOnline',\r\n  treatmentPlans: '++id, patientId, therapistId, title, description, sessions, status, createdAt, updatedAt, isOnline',\r\n  syncQueue: '++id, table, recordId, action, data, timestamp, retryCount'\r\n});\r\n\r\n// Database utility functions\r\nexport class IndexedDBService {\r\n  // User operations\r\n  static async createUser(userData) {\r\n    try {\r\n      // Check if user already exists by email\r\n      const existingUser = await db.users.where('email').equals(userData.email).first();\r\n      \r\n      if (existingUser) {\r\n        // Update existing user\r\n        await db.users.update(existingUser.id, {\r\n          ...userData,\r\n          updatedAt: new Date().toISOString()\r\n        });\r\n        return { id: existingUser.id, ...userData };\r\n      } else {\r\n        // Create new user\r\n        const id = await db.users.add({\r\n          ...userData,\r\n          createdAt: new Date().toISOString(),\r\n          updatedAt: new Date().toISOString(),\r\n          isOnline: false\r\n        });\r\n        return { id, ...userData };\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating user in IndexedDB:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getUserByEmail(email) {\r\n    try {\r\n      return await db.users.where('email').equals(email).first();\r\n    } catch (error) {\r\n      console.error('Error getting user by email from IndexedDB:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getUserById(id) {\r\n    try {\r\n      return await db.users.get(id);\r\n    } catch (error) {\r\n      console.error('Error getting user by ID from IndexedDB:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async updateUser(id, userData) {\r\n    try {\r\n      await db.users.update(id, {\r\n        ...userData,\r\n        updatedAt: new Date().toISOString()\r\n      });\r\n      return await this.getUserById(id);\r\n    } catch (error) {\r\n      console.error('Error updating user in IndexedDB:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getUsers() {\r\n    try {\r\n      return await db.users.orderBy('createdAt').reverse().toArray();\r\n    } catch (error) {\r\n      console.error('Error getting users from IndexedDB:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async deleteUser(id) {\r\n    try {\r\n      await db.users.delete(id);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting user from IndexedDB:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Patient operations\r\n  static async createPatient(patientData) {\r\n    try {\r\n      // Check if patient already exists by name\r\n      const existingPatient = await db.patients\r\n        .where('name')\r\n        .equals(patientData.name)\r\n        .first();\r\n      \r\n      if (existingPatient) {\r\n        // Update existing patient\r\n        await db.patients.update(existingPatient.id, {\r\n          ...patientData,\r\n          updatedAt: new Date().toISOString()\r\n        });\r\n        return { id: existingPatient.id, ...patientData };\r\n      } else {\r\n        // Create new patient\r\n        const id = await db.patients.add({\r\n          ...patientData,\r\n          createdAt: new Date().toISOString(),\r\n          updatedAt: new Date().toISOString(),\r\n          isOnline: false\r\n        });\r\n        return { id, ...patientData };\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating patient in IndexedDB:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getPatients() {\r\n    try {\r\n      return await db.patients.orderBy('createdAt').reverse().toArray();\r\n    } catch (error) {\r\n      console.error('Error getting patients from IndexedDB:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getPatientById(id) {\r\n    try {\r\n      return await db.patients.get(id);\r\n    } catch (error) {\r\n      console.error('Error getting patient by ID from IndexedDB:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async updatePatient(id, patientData) {\r\n    try {\r\n      await db.patients.update(id, {\r\n        ...patientData,\r\n        updatedAt: new Date().toISOString()\r\n      });\r\n      return await this.getPatientById(id);\r\n    } catch (error) {\r\n      console.error('Error updating patient in IndexedDB:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async deletePatient(id) {\r\n    try {\r\n      await db.patients.delete(id);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting patient from IndexedDB:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Sync queue operations\r\n  static async addToSyncQueue(table, recordId, action, data) {\r\n    try {\r\n      await db.syncQueue.add({\r\n        table,\r\n        recordId,\r\n        action,\r\n        data,\r\n        timestamp: new Date().toISOString(),\r\n        retryCount: 0\r\n      });\r\n    } catch (error) {\r\n      console.error('Error adding to sync queue:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getSyncQueue() {\r\n    try {\r\n      return await db.syncQueue.orderBy('timestamp').toArray();\r\n    } catch (error) {\r\n      console.error('Error getting sync queue:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async removeFromSyncQueue(id) {\r\n    try {\r\n      await db.syncQueue.delete(id);\r\n    } catch (error) {\r\n      console.error('Error removing from sync queue:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Check if online\r\n  static isOnline() {\r\n    return navigator.onLine;\r\n  }\r\n\r\n  // Initialize database\r\n  static async initialize() {\r\n    try {\r\n      await db.open();\r\n      console.log('IndexedDB initialized successfully');\r\n    } catch (error) {\r\n      console.error('Error initializing IndexedDB:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Clear all data (useful for debugging)\r\n  static async clearAll() {\r\n    try {\r\n      await db.users.clear();\r\n      await db.patients.clear();\r\n      await db.sessions.clear();\r\n      await db.treatmentPlans.clear();\r\n      await db.syncQueue.clear();\r\n      console.log('IndexedDB cleared successfully');\r\n    } catch (error) {\r\n      console.error('Error clearing IndexedDB:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default IndexedDBService;\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/erpai/projects/UI/luminate-clinician/src/lib/database/neon.js"],"sourcesContent":["import { neon } from '@neondatabase/serverless';\r\n\r\n// Neon DB configuration\r\nconst sql = process.env.NEXT_PUBLIC_NEON_DATABASE_URL \r\n  ? neon(process.env.NEXT_PUBLIC_NEON_DATABASE_URL)\r\n  : null;\r\n\r\nexport class NeonDBService {\r\n  // Check if Neon DB is available\r\n  static isAvailable() {\r\n    return sql !== null;\r\n  }\r\n\r\n  // Helper method to check availability and throw error if not available\r\n  static checkAvailability() {\r\n    if (!this.isAvailable()) {\r\n      throw new Error('Neon database not configured. Please set NEXT_PUBLIC_NEON_DATABASE_URL in your environment variables.');\r\n    }\r\n  }\r\n\r\n  // User operations\r\n  static async createUser(userData) {\r\n    if (!this.isAvailable()) {\r\n      throw new Error('Neon database not configured');\r\n    }\r\n    \r\n    try {\r\n      const { firstName, lastName, email, passwordHash, role, licenseNumber } = userData;\r\n      \r\n      const result = await sql`\r\n        INSERT INTO users (first_name, last_name, email, password_hash, role, license_number, created_at, updated_at)\r\n        VALUES (${firstName}, ${lastName}, ${email}, ${passwordHash}, ${role}, ${licenseNumber || null}, NOW(), NOW())\r\n        RETURNING id, first_name, last_name, email, role, license_number, created_at, updated_at\r\n      `;\r\n      \r\n      return result[0];\r\n    } catch (error) {\r\n      console.error('Error creating user in Neon DB:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getUserByEmail(email) {\r\n    if (!this.isAvailable()) {\r\n      throw new Error('Neon database not configured');\r\n    }\r\n    \r\n    try {\r\n      const result = await sql`\r\n        SELECT id, first_name, last_name, email, password_hash, role, license_number, created_at, updated_at\r\n        FROM users \r\n        WHERE email = ${email}\r\n      `;\r\n      \r\n      return result[0] || null;\r\n    } catch (error) {\r\n      console.error('Error getting user by email from Neon DB:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getUserById(id) {\r\n    try {\r\n      const result = await sql`\r\n        SELECT id, first_name, last_name, email, password_hash, role, license_number, created_at, updated_at\r\n        FROM users \r\n        WHERE id = ${id}\r\n      `;\r\n      \r\n      return result[0] || null;\r\n    } catch (error) {\r\n      console.error('Error getting user by ID from Neon DB:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async updateUser(id, userData) {\r\n    try {\r\n      const { firstName, lastName, email, role, licenseNumber } = userData;\r\n      \r\n      const result = await sql`\r\n        UPDATE users \r\n        SET first_name = ${firstName}, \r\n            last_name = ${lastName}, \r\n            email = ${email}, \r\n            role = ${role}, \r\n            license_number = ${licenseNumber || null},\r\n            updated_at = NOW()\r\n        WHERE id = ${id}\r\n        RETURNING id, first_name, last_name, email, role, license_number, created_at, updated_at\r\n      `;\r\n      \r\n      return result[0];\r\n    } catch (error) {\r\n      console.error('Error updating user in Neon DB:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getUsers() {\r\n    try {\r\n      const result = await sql`\r\n        SELECT id, first_name, last_name, email, password_hash, role, license_number, created_at, updated_at\r\n        FROM users \r\n        ORDER BY created_at DESC\r\n      `;\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      console.error('Error getting users from Neon DB:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async deleteUser(id) {\r\n    try {\r\n      await sql`DELETE FROM users WHERE id = ${id}`;\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting user from Neon DB:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Patient operations\r\n  static async createPatient(patientData) {\r\n    try {\r\n      const {\r\n        name, email, phone, dateOfBirth, diagnosis, medicalHistory,\r\n        emergencyContact, emergencyPhone, therapist, totalSessions, notes\r\n      } = patientData;\r\n      \r\n      const result = await sql`\r\n        INSERT INTO patients (\r\n          name, email, phone, date_of_birth, diagnosis, medical_history,\r\n          emergency_contact, emergency_phone, therapist, total_sessions, notes,\r\n          status, last_session, next_session, progress, sessions_completed,\r\n          created_at, updated_at\r\n        )\r\n        VALUES (\r\n          ${name}, ${email}, ${phone || null}, ${dateOfBirth}, ${diagnosis}, ${medicalHistory},\r\n          ${emergencyContact}, ${emergencyPhone}, ${therapist}, ${totalSessions}, ${notes || ''},\r\n          'active', 'N/A', 'TBD', 0, 0,\r\n          NOW(), NOW()\r\n        )\r\n        RETURNING id, name, email, phone, date_of_birth, diagnosis, medical_history,\r\n                  emergency_contact, emergency_phone, therapist, total_sessions, notes,\r\n                  status, last_session, next_session, progress, sessions_completed,\r\n                  created_at, updated_at\r\n      `;\r\n      \r\n      return result[0];\r\n    } catch (error) {\r\n      console.error('Error creating patient in Neon DB:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getPatients() {\r\n    try {\r\n      const result = await sql`\r\n        SELECT id, name, email, phone, date_of_birth, diagnosis, medical_history,\r\n               emergency_contact, emergency_phone, therapist, total_sessions, notes,\r\n               status, last_session, next_session, progress, sessions_completed,\r\n               created_at, updated_at\r\n        FROM patients \r\n        ORDER BY created_at DESC\r\n      `;\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      console.error('Error getting patients from Neon DB:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getPatientById(id) {\r\n    try {\r\n      const result = await sql`\r\n        SELECT id, name, email, phone, date_of_birth, diagnosis, medical_history,\r\n               emergency_contact, emergency_phone, therapist, total_sessions, notes,\r\n               status, last_session, next_session, progress, sessions_completed,\r\n               created_at, updated_at\r\n        FROM patients \r\n        WHERE id = ${id}\r\n      `;\r\n      \r\n      return result[0] || null;\r\n    } catch (error) {\r\n      console.error('Error getting patient by ID from Neon DB:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async updatePatient(id, patientData) {\r\n    try {\r\n      const {\r\n        name, email, phone, dateOfBirth, diagnosis, medicalHistory,\r\n        emergencyContact, emergencyPhone, therapist, totalSessions, notes,\r\n        status, lastSession, nextSession, progress, sessionsCompleted\r\n      } = patientData;\r\n      \r\n      const result = await sql`\r\n        UPDATE patients \r\n        SET name = ${name}, \r\n            email = ${email}, \r\n            phone = ${phone || null}, \r\n            date_of_birth = ${dateOfBirth}, \r\n            diagnosis = ${diagnosis}, \r\n            medical_history = ${medicalHistory},\r\n            emergency_contact = ${emergencyContact}, \r\n            emergency_phone = ${emergencyPhone}, \r\n            therapist = ${therapist}, \r\n            total_sessions = ${totalSessions}, \r\n            notes = ${notes || ''},\r\n            status = ${status || 'active'}, \r\n            last_session = ${lastSession || 'N/A'}, \r\n            next_session = ${nextSession || 'TBD'}, \r\n            progress = ${progress || 0}, \r\n            sessions_completed = ${sessionsCompleted || 0},\r\n            updated_at = NOW()\r\n        WHERE id = ${id}\r\n        RETURNING id, name, email, phone, date_of_birth, diagnosis, medical_history,\r\n                  emergency_contact, emergency_phone, therapist, total_sessions, notes,\r\n                  status, last_session, next_session, progress, sessions_completed,\r\n                  created_at, updated_at\r\n      `;\r\n      \r\n      return result[0];\r\n    } catch (error) {\r\n      console.error('Error updating patient in Neon DB:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async deletePatient(id) {\r\n    try {\r\n      await sql`DELETE FROM patients WHERE id = ${id}`;\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting patient from Neon DB:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Check if online\r\n  static isOnline() {\r\n    return navigator.onLine;\r\n  }\r\n}\r\n\r\nexport default NeonDBService;\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 467, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/erpai/projects/UI/luminate-clinician/src/lib/database/sync.js"],"sourcesContent":["import { IndexedDBService } from './indexeddb';\r\nimport { NeonDBService } from './neon';\r\n\r\nexport class SyncService {\r\n  static async syncToOnline() {\r\n    if (!IndexedDBService.isOnline() || !NeonDBService.isAvailable()) {\r\n      console.log('Device is offline or Neon DB not available, skipping sync');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const syncQueue = await IndexedDBService.getSyncQueue();\r\n      \r\n      for (const item of syncQueue) {\r\n        try {\r\n          await this.syncItem(item);\r\n          await IndexedDBService.removeFromSyncQueue(item.id);\r\n        } catch (error) {\r\n          console.error(`Error syncing item ${item.id}:`, error);\r\n          // Increment retry count\r\n          await this.incrementRetryCount(item.id);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during sync to online:', error);\r\n    }\r\n  }\r\n\r\n  static async syncItem(item) {\r\n    const { table, recordId, action, data } = item;\r\n\r\n    switch (table) {\r\n      case 'users':\r\n        await this.syncUser(recordId, action, data);\r\n        break;\r\n      case 'patients':\r\n        await this.syncPatient(recordId, action, data);\r\n        break;\r\n      case 'sessions':\r\n        await this.syncSession(recordId, action, data);\r\n        break;\r\n      case 'treatmentPlans':\r\n        await this.syncTreatmentPlan(recordId, action, data);\r\n        break;\r\n      default:\r\n        console.warn(`Unknown table for sync: ${table}`);\r\n    }\r\n  }\r\n\r\n  static async syncUser(recordId, action, data) {\r\n    switch (action) {\r\n      case 'create':\r\n        await NeonDBService.createUser(data);\r\n        break;\r\n      case 'update':\r\n        await NeonDBService.updateUser(recordId, data);\r\n        break;\r\n      case 'delete':\r\n        await NeonDBService.deleteUser(recordId);\r\n        break;\r\n    }\r\n  }\r\n\r\n  static async syncPatient(recordId, action, data) {\r\n    switch (action) {\r\n      case 'create':\r\n        await NeonDBService.createPatient(data);\r\n        break;\r\n      case 'update':\r\n        await NeonDBService.updatePatient(recordId, data);\r\n        break;\r\n      case 'delete':\r\n        await NeonDBService.deletePatient(recordId);\r\n        break;\r\n    }\r\n  }\r\n\r\n  static async syncSession(recordId, action, data) {\r\n    // Implement session sync logic\r\n    console.log('Syncing session:', { recordId, action, data });\r\n  }\r\n\r\n  static async syncTreatmentPlan(recordId, action, data) {\r\n    // Implement treatment plan sync logic\r\n    console.log('Syncing treatment plan:', { recordId, action, data });\r\n  }\r\n\r\n  static async incrementRetryCount(itemId) {\r\n    try {\r\n      // This would need to be implemented in IndexedDBService\r\n      console.log(`Incrementing retry count for item ${itemId}`);\r\n    } catch (error) {\r\n      console.error('Error incrementing retry count:', error);\r\n    }\r\n  }\r\n\r\n  static async syncFromOnline() {\r\n    if (!IndexedDBService.isOnline() || !NeonDBService.isAvailable()) {\r\n      console.log('Device is offline or Neon DB not available, skipping sync from online');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Sync users\r\n      const onlineUsers = await NeonDBService.getUsers();\r\n      for (const user of onlineUsers) {\r\n        try {\r\n          // Use createUser which handles duplicates\r\n          await IndexedDBService.createUser(user);\r\n        } catch (error) {\r\n          console.error('Error syncing user:', error);\r\n        }\r\n      }\r\n\r\n      // Sync patients\r\n      const onlinePatients = await NeonDBService.getPatients();\r\n      for (const patient of onlinePatients) {\r\n        try {\r\n          // Use createPatient which handles duplicates\r\n          await IndexedDBService.createPatient(patient);\r\n        } catch (error) {\r\n          console.error('Error syncing patient:', error);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during sync from online:', error);\r\n    }\r\n  }\r\n\r\n  // Initialize sync service\r\n  static async initialize() {\r\n    // Set up online/offline event listeners\r\n    window.addEventListener('online', () => {\r\n      console.log('Device came online, starting sync...');\r\n      this.syncToOnline();\r\n      this.syncFromOnline();\r\n    });\r\n\r\n    window.addEventListener('offline', () => {\r\n      console.log('Device went offline');\r\n    });\r\n\r\n    // Initial sync if online\r\n    if (IndexedDBService.isOnline()) {\r\n      await this.syncFromOnline();\r\n    }\r\n  }\r\n}\r\n\r\nexport default SyncService;\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 620, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/erpai/projects/UI/luminate-clinician/src/lib/database/init.js"],"sourcesContent":["import { neon } from '@neondatabase/serverless';\r\n\r\n// Neon DB configuration\r\nconst sql = neon(process.env.NEXT_PUBLIC_NEON_DATABASE_URL);\r\n\r\nexport class DatabaseInitializer {\r\n  static async checkAndCreateTables() {\r\n    try {\r\n      // Check if users table exists\r\n      const tableCheck = await sql`\r\n        SELECT EXISTS (\r\n          SELECT FROM information_schema.tables \r\n          WHERE table_schema = 'public' \r\n          AND table_name = 'users'\r\n        );\r\n      `;\r\n\r\n      if (!tableCheck[0].exists) {\r\n        console.log('Creating database tables...');\r\n        await this.createTables();\r\n        console.log('Database tables created successfully!');\r\n      } else {\r\n        console.log('Database tables already exist.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking/creating database tables:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async createTables() {\r\n    try {\r\n      // Create users table\r\n      await sql`\r\n        CREATE TABLE IF NOT EXISTS users (\r\n          id SERIAL PRIMARY KEY,\r\n          first_name VARCHAR(255) NOT NULL,\r\n          last_name VARCHAR(255) NOT NULL,\r\n          email VARCHAR(255) UNIQUE NOT NULL,\r\n          password_hash VARCHAR(255) NOT NULL,\r\n          role VARCHAR(50) NOT NULL,\r\n          license_number VARCHAR(255),\r\n          created_at TIMESTAMP DEFAULT NOW(),\r\n          updated_at TIMESTAMP DEFAULT NOW()\r\n        );\r\n      `;\r\n\r\n      // Create patients table\r\n      await sql`\r\n        CREATE TABLE IF NOT EXISTS patients (\r\n          id SERIAL PRIMARY KEY,\r\n          name VARCHAR(255) NOT NULL,\r\n          email VARCHAR(255),\r\n          phone VARCHAR(20),\r\n          date_of_birth DATE,\r\n          diagnosis TEXT,\r\n          medical_history TEXT,\r\n          emergency_contact VARCHAR(255),\r\n          emergency_phone VARCHAR(20),\r\n          therapist VARCHAR(255),\r\n          total_sessions INTEGER DEFAULT 0,\r\n          notes TEXT,\r\n          status VARCHAR(50) DEFAULT 'active',\r\n          last_session VARCHAR(100),\r\n          next_session VARCHAR(100),\r\n          progress INTEGER DEFAULT 0,\r\n          sessions_completed INTEGER DEFAULT 0,\r\n          created_at TIMESTAMP DEFAULT NOW(),\r\n          updated_at TIMESTAMP DEFAULT NOW()\r\n        );\r\n      `;\r\n\r\n      // Create sessions table\r\n      await sql`\r\n        CREATE TABLE IF NOT EXISTS sessions (\r\n          id SERIAL PRIMARY KEY,\r\n          patient_id INTEGER REFERENCES patients(id) ON DELETE CASCADE,\r\n          therapist_id INTEGER REFERENCES users(id) ON DELETE CASCADE,\r\n          date TIMESTAMP NOT NULL,\r\n          duration INTEGER NOT NULL,\r\n          type VARCHAR(100) NOT NULL,\r\n          notes TEXT,\r\n          status VARCHAR(50) DEFAULT 'scheduled',\r\n          created_at TIMESTAMP DEFAULT NOW(),\r\n          updated_at TIMESTAMP DEFAULT NOW()\r\n        );\r\n      `;\r\n\r\n      // Create treatment_plans table\r\n      await sql`\r\n        CREATE TABLE IF NOT EXISTS treatment_plans (\r\n          id SERIAL PRIMARY KEY,\r\n          patient_id INTEGER REFERENCES patients(id) ON DELETE CASCADE,\r\n          therapist_id INTEGER REFERENCES users(id) ON DELETE CASCADE,\r\n          title VARCHAR(255) NOT NULL,\r\n          description TEXT,\r\n          sessions JSONB,\r\n          status VARCHAR(50) DEFAULT 'active',\r\n          created_at TIMESTAMP DEFAULT NOW(),\r\n          updated_at TIMESTAMP DEFAULT NOW()\r\n        );\r\n      `;\r\n\r\n      // Create indexes for better performance\r\n      await sql`CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);`;\r\n      await sql`CREATE INDEX IF NOT EXISTS idx_patients_name ON patients(name);`;\r\n      await sql`CREATE INDEX IF NOT EXISTS idx_patients_status ON patients(status);`;\r\n      await sql`CREATE INDEX IF NOT EXISTS idx_sessions_patient_id ON sessions(patient_id);`;\r\n      await sql`CREATE INDEX IF NOT EXISTS idx_sessions_therapist_id ON sessions(therapist_id);`;\r\n      await sql`CREATE INDEX IF NOT EXISTS idx_treatment_plans_patient_id ON treatment_plans(patient_id);`;\r\n\r\n      // Insert a default admin user (password: admin123)\r\n      await sql`\r\n        INSERT INTO users (first_name, last_name, email, password_hash, role, license_number) \r\n        VALUES (\r\n          'Admin', \r\n          'User', \r\n          'admin@luminate.com', \r\n          '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/9yQKQK2',\r\n          'clinician', \r\n          'ADMIN001'\r\n        ) ON CONFLICT (email) DO NOTHING;\r\n      `;\r\n\r\n    } catch (error) {\r\n      console.error('Error creating tables:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async testConnection() {\r\n    try {\r\n      const result = await sql`SELECT NOW() as current_time;`;\r\n      console.log('Database connection successful:', result[0]);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Database connection failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default DatabaseInitializer;\r\n"],"names":[],"mappings":";;;;;;AAAA;;AAEA,wBAAwB;AACxB,MAAM,MAAM,IAAA,8JAAI;AAET,MAAM;IACX,aAAa,uBAAuB;QAClC,IAAI;YACF,8BAA8B;YAC9B,MAAM,aAAa,MAAM,GAAG,CAAC;;;;;;MAM7B,CAAC;YAED,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,MAAM,EAAE;gBACzB,QAAQ,GAAG,CAAC;gBACZ,MAAM,IAAI,CAAC,YAAY;gBACvB,QAAQ,GAAG,CAAC;YACd,OAAO;gBACL,QAAQ,GAAG,CAAC;YACd;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,4CAA4C;YAC1D,MAAM;QACR;IACF;IAEA,aAAa,eAAe;QAC1B,IAAI;YACF,qBAAqB;YACrB,MAAM,GAAG,CAAC;;;;;;;;;;;;MAYV,CAAC;YAED,wBAAwB;YACxB,MAAM,GAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;MAsBV,CAAC;YAED,wBAAwB;YACxB,MAAM,GAAG,CAAC;;;;;;;;;;;;;MAaV,CAAC;YAED,+BAA+B;YAC/B,MAAM,GAAG,CAAC;;;;;;;;;;;;MAYV,CAAC;YAED,wCAAwC;YACxC,MAAM,GAAG,CAAC,2DAA2D,CAAC;YACtE,MAAM,GAAG,CAAC,+DAA+D,CAAC;YAC1E,MAAM,GAAG,CAAC,mEAAmE,CAAC;YAC9E,MAAM,GAAG,CAAC,2EAA2E,CAAC;YACtF,MAAM,GAAG,CAAC,+EAA+E,CAAC;YAC1F,MAAM,GAAG,CAAC,yFAAyF,CAAC;YAEpG,mDAAmD;YACnD,MAAM,GAAG,CAAC;;;;;;;;;;MAUV,CAAC;QAEH,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0BAA0B;YACxC,MAAM;QACR;IACF;IAEA,aAAa,iBAAiB;QAC5B,IAAI;YACF,MAAM,SAAS,MAAM,GAAG,CAAC,6BAA6B,CAAC;YACvD,QAAQ,GAAG,CAAC,mCAAmC,MAAM,CAAC,EAAE;YACxD,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,+BAA+B;YAC7C,OAAO;QACT;IACF;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 762, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/erpai/projects/UI/luminate-clinician/src/lib/database/index.js"],"sourcesContent":["import { IndexedDBService } from './indexeddb';\r\nimport { NeonDBService } from './neon';\r\nimport { SyncService } from './sync';\r\nimport { DatabaseInitializer } from './init';\r\n\r\nexport class DatabaseService {\r\n  static async initialize() {\r\n    try {\r\n      // Initialize IndexedDB\r\n      await IndexedDBService.initialize();\r\n      \r\n      // Check and create Neon DB tables if they don't exist\r\n      if (process.env.NEXT_PUBLIC_NEON_DATABASE_URL) {\r\n        try {\r\n          await DatabaseInitializer.checkAndCreateTables();\r\n        } catch (error) {\r\n          console.warn('Neon database setup failed, continuing with offline mode only:', error.message);\r\n        }\r\n      } else {\r\n        console.log('Neon database not configured, running in offline mode only');\r\n      }\r\n      \r\n      // Initialize sync service\r\n      await SyncService.initialize();\r\n      \r\n      console.log('Database service initialized successfully');\r\n    } catch (error) {\r\n      console.error('Error initializing database service:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // User operations with dual database support\r\n  static async createUser(userData) {\r\n    try {\r\n      // Always create in IndexedDB first (offline-first approach)\r\n      const localUser = await IndexedDBService.createUser(userData);\r\n      \r\n      // If online and Neon DB is available, also create in Neon DB\r\n      if (IndexedDBService.isOnline() && NeonDBService.isAvailable()) {\r\n        try {\r\n          await NeonDBService.createUser(userData);\r\n          // Update local user to mark as online\r\n          await IndexedDBService.updateUser(localUser.id, { isOnline: true });\r\n        } catch (error) {\r\n          console.error('Error creating user in Neon DB:', error);\r\n          // Add to sync queue for later\r\n          await IndexedDBService.addToSyncQueue('users', localUser.id, 'create', userData);\r\n        }\r\n      } else {\r\n        // Add to sync queue for when online\r\n        await IndexedDBService.addToSyncQueue('users', localUser.id, 'create', userData);\r\n      }\r\n      \r\n      return localUser;\r\n    } catch (error) {\r\n      console.error('Error creating user:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getUserByEmail(email) {\r\n    try {\r\n      // Try to get from IndexedDB first\r\n      let user = await IndexedDBService.getUserByEmail(email);\r\n      \r\n      // If not found locally and online, try Neon DB\r\n      if (!user && IndexedDBService.isOnline()) {\r\n        try {\r\n          user = await NeonDBService.getUserByEmail(email);\r\n          if (user) {\r\n            // Store in IndexedDB for offline access\r\n            await IndexedDBService.createUser(user);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error getting user from Neon DB:', error);\r\n        }\r\n      }\r\n      \r\n      return user;\r\n    } catch (error) {\r\n      console.error('Error getting user by email:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getUserById(id) {\r\n    try {\r\n      // Try to get from IndexedDB first\r\n      let user = await IndexedDBService.getUserById(id);\r\n      \r\n      // If not found locally and online, try Neon DB\r\n      if (!user && IndexedDBService.isOnline()) {\r\n        try {\r\n          user = await NeonDBService.getUserById(id);\r\n          if (user) {\r\n            // Store in IndexedDB for offline access\r\n            await IndexedDBService.createUser(user);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error getting user from Neon DB:', error);\r\n        }\r\n      }\r\n      \r\n      return user;\r\n    } catch (error) {\r\n      console.error('Error getting user by ID:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async updateUser(id, userData) {\r\n    try {\r\n      // Update in IndexedDB first\r\n      const localUser = await IndexedDBService.updateUser(id, userData);\r\n      \r\n      // If online, also update in Neon DB\r\n      if (IndexedDBService.isOnline()) {\r\n        try {\r\n          await NeonDBService.updateUser(id, userData);\r\n        } catch (error) {\r\n          console.error('Error updating user in Neon DB:', error);\r\n          // Add to sync queue for later\r\n          await IndexedDBService.addToSyncQueue('users', id, 'update', userData);\r\n        }\r\n      } else {\r\n        // Add to sync queue for when online\r\n        await IndexedDBService.addToSyncQueue('users', id, 'update', userData);\r\n      }\r\n      \r\n      return localUser;\r\n    } catch (error) {\r\n      console.error('Error updating user:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Patient operations with dual database support\r\n  static async createPatient(patientData) {\r\n    try {\r\n      // Always create in IndexedDB first (offline-first approach)\r\n      const localPatient = await IndexedDBService.createPatient(patientData);\r\n      \r\n      // If online, also create in Neon DB\r\n      if (IndexedDBService.isOnline()) {\r\n        try {\r\n          await NeonDBService.createPatient(patientData);\r\n          // Update local patient to mark as online\r\n          await IndexedDBService.updatePatient(localPatient.id, { isOnline: true });\r\n        } catch (error) {\r\n          console.error('Error creating patient in Neon DB:', error);\r\n          // Add to sync queue for later\r\n          await IndexedDBService.addToSyncQueue('patients', localPatient.id, 'create', patientData);\r\n        }\r\n      } else {\r\n        // Add to sync queue for when online\r\n        await IndexedDBService.addToSyncQueue('patients', localPatient.id, 'create', patientData);\r\n      }\r\n      \r\n      return localPatient;\r\n    } catch (error) {\r\n      console.error('Error creating patient:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getPatients() {\r\n    try {\r\n      // Get from IndexedDB first\r\n      let patients = await IndexedDBService.getPatients();\r\n      \r\n      // If online, also sync from Neon DB\r\n      if (IndexedDBService.isOnline()) {\r\n        try {\r\n          const onlinePatients = await NeonDBService.getPatients();\r\n          // Merge online patients with local ones\r\n          for (const onlinePatient of onlinePatients) {\r\n            const localPatient = patients.find(p => p.id === onlinePatient.id);\r\n            if (!localPatient) {\r\n              // Add new patient from online\r\n              await IndexedDBService.createPatient(onlinePatient);\r\n              patients.push(onlinePatient);\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error('Error getting patients from Neon DB:', error);\r\n        }\r\n      }\r\n      \r\n      return patients;\r\n    } catch (error) {\r\n      console.error('Error getting patients:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getPatientById(id) {\r\n    try {\r\n      // Try to get from IndexedDB first\r\n      let patient = await IndexedDBService.getPatientById(id);\r\n      \r\n      // If not found locally and online, try Neon DB\r\n      if (!patient && IndexedDBService.isOnline()) {\r\n        try {\r\n          patient = await NeonDBService.getPatientById(id);\r\n          if (patient) {\r\n            // Store in IndexedDB for offline access\r\n            await IndexedDBService.createPatient(patient);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error getting patient from Neon DB:', error);\r\n        }\r\n      }\r\n      \r\n      return patient;\r\n    } catch (error) {\r\n      console.error('Error getting patient by ID:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async updatePatient(id, patientData) {\r\n    try {\r\n      // Update in IndexedDB first\r\n      const localPatient = await IndexedDBService.updatePatient(id, patientData);\r\n      \r\n      // If online, also update in Neon DB\r\n      if (IndexedDBService.isOnline()) {\r\n        try {\r\n          await NeonDBService.updatePatient(id, patientData);\r\n        } catch (error) {\r\n          console.error('Error updating patient in Neon DB:', error);\r\n          // Add to sync queue for later\r\n          await IndexedDBService.addToSyncQueue('patients', id, 'update', patientData);\r\n        }\r\n      } else {\r\n        // Add to sync queue for when online\r\n        await IndexedDBService.addToSyncQueue('patients', id, 'update', patientData);\r\n      }\r\n      \r\n      return localPatient;\r\n    } catch (error) {\r\n      console.error('Error updating patient:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async deletePatient(id) {\r\n    try {\r\n      // Delete from IndexedDB first\r\n      await IndexedDBService.deletePatient(id);\r\n      \r\n      // If online, also delete from Neon DB\r\n      if (IndexedDBService.isOnline()) {\r\n        try {\r\n          await NeonDBService.deletePatient(id);\r\n        } catch (error) {\r\n          console.error('Error deleting patient from Neon DB:', error);\r\n          // Add to sync queue for later\r\n          await IndexedDBService.addToSyncQueue('patients', id, 'delete', {});\r\n        }\r\n      } else {\r\n        // Add to sync queue for when online\r\n        await IndexedDBService.addToSyncQueue('patients', id, 'delete', {});\r\n      }\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting patient:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Sync operations\r\n  static async sync() {\r\n    await SyncService.syncToOnline();\r\n  }\r\n\r\n  static async isOnline() {\r\n    return IndexedDBService.isOnline();\r\n  }\r\n}\r\n\r\nexport default DatabaseService;\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1029, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/erpai/projects/UI/luminate-clinician/src/lib/database/debug.js"],"sourcesContent":["import { IndexedDBService } from './indexeddb';\r\n\r\nexport class DatabaseDebug {\r\n  // Clear all local data\r\n  static async clearLocalData() {\r\n    try {\r\n      await IndexedDBService.clearAll();\r\n      console.log('✅ Local database cleared successfully');\r\n      return { success: true, message: 'Local database cleared successfully' };\r\n    } catch (error) {\r\n      console.error('❌ Error clearing local database:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  // Get database statistics\r\n  static async getStats() {\r\n    try {\r\n      const users = await IndexedDBService.getUsers();\r\n      const patients = await IndexedDBService.getPatients();\r\n      const syncQueue = await IndexedDBService.getSyncQueue();\r\n\r\n      return {\r\n        success: true,\r\n        stats: {\r\n          users: users.length,\r\n          patients: patients.length,\r\n          syncQueue: syncQueue.length,\r\n          isOnline: IndexedDBService.isOnline()\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('❌ Error getting database stats:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  // Reset database (clear and reinitialize)\r\n  static async reset() {\r\n    try {\r\n      await this.clearLocalData();\r\n      await IndexedDBService.initialize();\r\n      console.log('✅ Database reset successfully');\r\n      return { success: true, message: 'Database reset successfully' };\r\n    } catch (error) {\r\n      console.error('❌ Error resetting database:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n}\r\n\r\n// Make debug functions available globally for console debugging\r\nif (typeof window !== 'undefined') {\r\n  window.DatabaseDebug = DatabaseDebug;\r\n  console.log('🔧 Database debug tools available:');\r\n  console.log('  - DatabaseDebug.clearLocalData() - Clear all local data');\r\n  console.log('  - DatabaseDebug.getStats() - Get database statistics');\r\n  console.log('  - DatabaseDebug.reset() - Reset database');\r\n}\r\n\r\nexport default DatabaseDebug;\r\n"],"names":[],"mappings":";;;;;;AAAA;;AAEO,MAAM;IACX,uBAAuB;IACvB,aAAa,iBAAiB;QAC5B,IAAI;YACF,MAAM,uJAAgB,CAAC,QAAQ;YAC/B,QAAQ,GAAG,CAAC;YACZ,OAAO;gBAAE,SAAS;gBAAM,SAAS;YAAsC;QACzE,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,oCAAoC;YAClD,OAAO;gBAAE,SAAS;gBAAO,OAAO,MAAM,OAAO;YAAC;QAChD;IACF;IAEA,0BAA0B;IAC1B,aAAa,WAAW;QACtB,IAAI;YACF,MAAM,QAAQ,MAAM,uJAAgB,CAAC,QAAQ;YAC7C,MAAM,WAAW,MAAM,uJAAgB,CAAC,WAAW;YACnD,MAAM,YAAY,MAAM,uJAAgB,CAAC,YAAY;YAErD,OAAO;gBACL,SAAS;gBACT,OAAO;oBACL,OAAO,MAAM,MAAM;oBACnB,UAAU,SAAS,MAAM;oBACzB,WAAW,UAAU,MAAM;oBAC3B,UAAU,uJAAgB,CAAC,QAAQ;gBACrC;YACF;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,mCAAmC;YACjD,OAAO;gBAAE,SAAS;gBAAO,OAAO,MAAM,OAAO;YAAC;QAChD;IACF;IAEA,0CAA0C;IAC1C,aAAa,QAAQ;QACnB,IAAI;YACF,MAAM,IAAI,CAAC,cAAc;YACzB,MAAM,uJAAgB,CAAC,UAAU;YACjC,QAAQ,GAAG,CAAC;YACZ,OAAO;gBAAE,SAAS;gBAAM,SAAS;YAA8B;QACjE,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,+BAA+B;YAC7C,OAAO;gBAAE,SAAS;gBAAO,OAAO,MAAM,OAAO;YAAC;QAChD;IACF;AACF;AAEA,gEAAgE;AAChE;;uCAQe","debugId":null}},
    {"offset": {"line": 1105, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/erpai/projects/UI/luminate-clinician/src/components/DatabaseInitializer.js"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { DatabaseService } from '@/lib/database';\r\nimport '@/lib/database/debug';\r\n\r\nexport default function DatabaseInitializer({ children }) {\r\n  const [isInitialized, setIsInitialized] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const initializeDatabase = async () => {\r\n      try {\r\n        await DatabaseService.initialize();\r\n        setIsInitialized(true);\r\n      } catch (error) {\r\n        console.error('Error initializing database:', error);\r\n        setError(error.message);\r\n        // Still set as initialized to prevent blocking the app\r\n        setIsInitialized(true);\r\n      }\r\n    };\r\n\r\n    initializeDatabase();\r\n  }, []);\r\n\r\n  if (!isInitialized) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950\">\r\n        <div className=\"text-center\">\r\n          <div className=\"w-16 h-16 mx-auto mb-4 bg-gradient-to-br from-cyan-400 to-teal-500 rounded-3xl flex items-center justify-center shadow-2xl animate-pulse\">\r\n            <svg className=\"w-8 h-8 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"/>\r\n            </svg>\r\n          </div>\r\n          <h2 className=\"text-2xl font-bold text-white mb-2\">Initializing Database</h2>\r\n          <p className=\"text-slate-400\">Setting up offline and online storage...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    console.warn('Database initialization warning:', error);\r\n  }\r\n\r\n  return children;\r\n}\r\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAJA;;;;;AAMe,SAAS,oBAAoB,EAAE,QAAQ,EAAE;IACtD,MAAM,CAAC,eAAe,iBAAiB,GAAG,IAAA,iNAAQ,EAAC;IACnD,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,iNAAQ,EAAC;IAEnC,IAAA,kNAAS,EAAC;QACR,MAAM,qBAAqB;YACzB,IAAI;gBACF,MAAM,kJAAe,CAAC,UAAU;gBAChC,iBAAiB;YACnB,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,gCAAgC;gBAC9C,SAAS,MAAM,OAAO;gBACtB,uDAAuD;gBACvD,iBAAiB;YACnB;QACF;QAEA;IACF,GAAG,EAAE;IAEL,IAAI,CAAC,eAAe;QAClB,qBACE,8OAAC;YAAI,WAAU;sBACb,cAAA,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;kCACb,cAAA,8OAAC;4BAAI,WAAU;4BAAqB,MAAK;4BAAe,SAAQ;sCAC9D,cAAA,8OAAC;gCAAK,GAAE;;;;;;;;;;;;;;;;kCAGZ,8OAAC;wBAAG,WAAU;kCAAqC;;;;;;kCACnD,8OAAC;wBAAE,WAAU;kCAAiB;;;;;;;;;;;;;;;;;IAItC;IAEA,IAAI,OAAO;QACT,QAAQ,IAAI,CAAC,oCAAoC;IACnD;IAEA,OAAO;AACT","debugId":null}}]
}