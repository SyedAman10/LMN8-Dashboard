{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/erpai/projects/UI/luminate-clinician/src/lib/db.js"],"sourcesContent":["import { Pool } from '@neondatabase/serverless';\nimport dotenv from 'dotenv';\n\n// Load environment variables\ndotenv.config({ path: '.env.local' });\n\n// Get database connection string\nconst connectionString = process.env.DATABASE_URL || process.env.NEON_DATABASE_URL;\n\nif (!connectionString) {\n  console.error('‚ùå DATABASE_URL environment variable is not set!');\n  console.error('Please set DATABASE_URL in your .env.local file with your Neon database connection string.');\n  console.error('Example: DATABASE_URL=postgresql://username:password@ep-xxx-xxx.us-east-1.aws.neon.tech/neondb?sslmode=require');\n}\n\n// Create a connection pool\nconst pool = new Pool({\n  connectionString: connectionString,\n});\n\n// Test the database connection\nexport async function testConnection() {\n  try {\n    const client = await pool.connect();\n    const result = await client.query('SELECT NOW()');\n    client.release();\n    console.log('Database connected successfully:', result.rows[0]);\n    return true;\n  } catch (error) {\n    console.error('Database connection failed:', error);\n    return false;\n  }\n}\n\n// Execute a query with error handling\nexport async function query(text, params) {\n  if (!connectionString) {\n    throw new Error('Database connection string not configured. Please set DATABASE_URL environment variable.');\n  }\n  \n  const client = await pool.connect();\n  try {\n    const result = await client.query(text, params);\n    return result;\n  } catch (error) {\n    console.error('Database query error:', error);\n    console.error('Query:', text);\n    console.error('Params:', params);\n    throw error;\n  } finally {\n    client.release();\n  }\n}\n\n// Initialize database schema\nexport async function initDatabase() {\n  try {\n    // Check if database is configured\n    if (!connectionString) {\n      throw new Error('Database connection string not configured. Please set DATABASE_URL environment variable.');\n    }\n\n    console.log('üîç Checking database connection...');\n    const connected = await testConnection();\n    if (!connected) {\n      throw new Error('Database connection failed');\n    }\n\n    console.log('üìã Initializing database schema...');\n    \n    // Create users table first\n    console.log('   Creating users table...');\n    await query(`\n      CREATE TABLE IF NOT EXISTS users (\n        id SERIAL PRIMARY KEY,\n        email VARCHAR(255) UNIQUE NOT NULL,\n        password_hash VARCHAR(255) NOT NULL,\n        first_name VARCHAR(100) NOT NULL,\n        last_name VARCHAR(100) NOT NULL,\n        role VARCHAR(50) NOT NULL,\n        license_number VARCHAR(100),\n        is_active BOOLEAN DEFAULT true,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n    console.log('   ‚úÖ Users table created');\n\n    // Create sessions table for JWT session management\n    console.log('   Creating user_sessions table...');\n    await query(`\n      CREATE TABLE IF NOT EXISTS user_sessions (\n        id SERIAL PRIMARY KEY,\n        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,\n        session_token VARCHAR(255) UNIQUE NOT NULL,\n        expires_at TIMESTAMP NOT NULL,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n    console.log('   ‚úÖ User sessions table created');\n\n    // Create patients table\n    console.log('   Creating patients table...');\n    await query(`\n      CREATE TABLE IF NOT EXISTS patients (\n        id SERIAL PRIMARY KEY,\n        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,\n        name VARCHAR(255) NOT NULL,\n        email VARCHAR(255),\n        phone VARCHAR(20),\n        date_of_birth DATE,\n        diagnosis TEXT,\n        medical_history TEXT,\n        emergency_contact VARCHAR(255),\n        emergency_phone VARCHAR(20),\n        therapist VARCHAR(255),\n        total_sessions INTEGER DEFAULT 12,\n        sessions_completed INTEGER DEFAULT 0,\n        status VARCHAR(50) DEFAULT 'active',\n        notes TEXT,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n    console.log('   ‚úÖ Patients table created');\n\n    // Create patient_users table for patient authentication\n    console.log('   Creating patient_users table...');\n    await query(`\n      CREATE TABLE IF NOT EXISTS patient_users (\n        id SERIAL PRIMARY KEY,\n        patient_id INTEGER REFERENCES patients(id) ON DELETE CASCADE,\n        username VARCHAR(50) UNIQUE NOT NULL,\n        password_hash VARCHAR(255) NOT NULL,\n        is_active BOOLEAN DEFAULT true,\n        last_login TIMESTAMP,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n    console.log('   ‚úÖ Patient users table created');\n\n    // Create indexes for better performance\n    console.log('   Creating indexes...');\n    try {\n      await query(`CREATE INDEX IF NOT EXISTS idx_users_email ON users(email)`);\n      await query(`CREATE INDEX IF NOT EXISTS idx_sessions_token ON user_sessions(session_token)`);\n      await query(`CREATE INDEX IF NOT EXISTS idx_patients_user_id ON patients(user_id)`);\n      await query(`CREATE INDEX IF NOT EXISTS idx_patient_users_username ON patient_users(username)`);\n      await query(`CREATE INDEX IF NOT EXISTS idx_patient_users_patient_id ON patient_users(patient_id)`);\n      console.log('   ‚úÖ Indexes created');\n    } catch (indexError) {\n      console.log('   ‚ö†Ô∏è  Some indexes may already exist:', indexError.message);\n    }\n\n    console.log('‚úÖ Database schema initialized successfully');\n    return true;\n  } catch (error) {\n    console.error('‚ùå Database initialization failed:', error);\n    console.error('Error details:', {\n      message: error.message,\n      code: error.code,\n      detail: error.detail\n    });\n    throw error;\n  }\n}\n\nexport default pool;\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;;;AAEA,6BAA6B;AAC7B,kJAAM,CAAC,MAAM,CAAC;IAAE,MAAM;AAAa;AAEnC,iCAAiC;AACjC,MAAM,mBAAmB,QAAQ,GAAG,CAAC,YAAY,IAAI,QAAQ,GAAG,CAAC,iBAAiB;AAElF,IAAI,CAAC,kBAAkB;IACrB,QAAQ,KAAK,CAAC;IACd,QAAQ,KAAK,CAAC;IACd,QAAQ,KAAK,CAAC;AAChB;AAEA,2BAA2B;AAC3B,MAAM,OAAO,IAAI,gKAAI,CAAC;IACpB,kBAAkB;AACpB;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,KAAK,OAAO;QACjC,MAAM,SAAS,MAAM,OAAO,KAAK,CAAC;QAClC,OAAO,OAAO;QACd,QAAQ,GAAG,CAAC,oCAAoC,OAAO,IAAI,CAAC,EAAE;QAC9D,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO;IACT;AACF;AAGO,eAAe,MAAM,IAAI,EAAE,MAAM;IACtC,IAAI,CAAC,kBAAkB;QACrB,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,SAAS,MAAM,KAAK,OAAO;IACjC,IAAI;QACF,MAAM,SAAS,MAAM,OAAO,KAAK,CAAC,MAAM;QACxC,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,QAAQ,KAAK,CAAC,UAAU;QACxB,QAAQ,KAAK,CAAC,WAAW;QACzB,MAAM;IACR,SAAU;QACR,OAAO,OAAO;IAChB;AACF;AAGO,eAAe;IACpB,IAAI;QACF,kCAAkC;QAClC,IAAI,CAAC,kBAAkB;YACrB,MAAM,IAAI,MAAM;QAClB;QAEA,QAAQ,GAAG,CAAC;QACZ,MAAM,YAAY,MAAM;QACxB,IAAI,CAAC,WAAW;YACd,MAAM,IAAI,MAAM;QAClB;QAEA,QAAQ,GAAG,CAAC;QAEZ,2BAA2B;QAC3B,QAAQ,GAAG,CAAC;QACZ,MAAM,MAAM,CAAC;;;;;;;;;;;;;IAab,CAAC;QACD,QAAQ,GAAG,CAAC;QAEZ,mDAAmD;QACnD,QAAQ,GAAG,CAAC;QACZ,MAAM,MAAM,CAAC;;;;;;;;IAQb,CAAC;QACD,QAAQ,GAAG,CAAC;QAEZ,wBAAwB;QACxB,QAAQ,GAAG,CAAC;QACZ,MAAM,MAAM,CAAC;;;;;;;;;;;;;;;;;;;;IAoBb,CAAC;QACD,QAAQ,GAAG,CAAC;QAEZ,wDAAwD;QACxD,QAAQ,GAAG,CAAC;QACZ,MAAM,MAAM,CAAC;;;;;;;;;;;IAWb,CAAC;QACD,QAAQ,GAAG,CAAC;QAEZ,wCAAwC;QACxC,QAAQ,GAAG,CAAC;QACZ,IAAI;YACF,MAAM,MAAM,CAAC,0DAA0D,CAAC;YACxE,MAAM,MAAM,CAAC,6EAA6E,CAAC;YAC3F,MAAM,MAAM,CAAC,oEAAoE,CAAC;YAClF,MAAM,MAAM,CAAC,gFAAgF,CAAC;YAC9F,MAAM,MAAM,CAAC,oFAAoF,CAAC;YAClG,QAAQ,GAAG,CAAC;QACd,EAAE,OAAO,YAAY;YACnB,QAAQ,GAAG,CAAC,0CAA0C,WAAW,OAAO;QAC1E;QAEA,QAAQ,GAAG,CAAC;QACZ,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,QAAQ,KAAK,CAAC,kBAAkB;YAC9B,SAAS,MAAM,OAAO;YACtB,MAAM,MAAM,IAAI;YAChB,QAAQ,MAAM,MAAM;QACtB;QACA,MAAM;IACR;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 246, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/erpai/projects/UI/luminate-clinician/src/app/api/auth/logout/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { query } from '@/lib/db';\r\n\r\nexport async function POST(request) {\r\n  try {\r\n    const sessionToken = request.cookies.get('session_token')?.value;\r\n\r\n    if (sessionToken) {\r\n      // Delete the session from database\r\n      await query(\r\n        'DELETE FROM user_sessions WHERE session_token = $1',\r\n        [sessionToken]\r\n      );\r\n    }\r\n\r\n    // Clear the session cookie\r\n    const response = NextResponse.json(\r\n      { message: 'Logout successful' },\r\n      { status: 200 }\r\n    );\r\n\r\n    response.cookies.set('session_token', '', {\r\n      httpOnly: true,\r\n      secure: process.env.NODE_ENV === 'production',\r\n      sameSite: 'lax',\r\n      maxAge: 0,\r\n      path: '/'\r\n    });\r\n\r\n    return response;\r\n\r\n  } catch (error) {\r\n    console.error('Logout error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,MAAM,eAAe,QAAQ,OAAO,CAAC,GAAG,CAAC,kBAAkB;QAE3D,IAAI,cAAc;YAChB,mCAAmC;YACnC,MAAM,IAAA,2HAAK,EACT,sDACA;gBAAC;aAAa;QAElB;QAEA,2BAA2B;QAC3B,MAAM,WAAW,gJAAY,CAAC,IAAI,CAChC;YAAE,SAAS;QAAoB,GAC/B;YAAE,QAAQ;QAAI;QAGhB,SAAS,OAAO,CAAC,GAAG,CAAC,iBAAiB,IAAI;YACxC,UAAU;YACV,QAAQ,oDAAyB;YACjC,UAAU;YACV,QAAQ;YACR,MAAM;QACR;QAEA,OAAO;IAET,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}