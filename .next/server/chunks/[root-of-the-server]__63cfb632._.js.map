{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/erpai/projects/UI/luminate-clinician/src/lib/db.js"],"sourcesContent":["import { Pool } from '@neondatabase/serverless';\nimport dotenv from 'dotenv';\n\n// Load environment variables\ndotenv.config({ path: '.env.local' });\n\n// Get database connection string\nconst connectionString = process.env.DATABASE_URL || process.env.NEON_DATABASE_URL;\n\nif (!connectionString) {\n  console.error('❌ DATABASE_URL environment variable is not set!');\n  console.error('Please set DATABASE_URL in your .env.local file with your Neon database connection string.');\n  console.error('Example: DATABASE_URL=postgresql://username:password@ep-xxx-xxx.us-east-1.aws.neon.tech/neondb?sslmode=require');\n}\n\n// Create a connection pool\nconst pool = new Pool({\n  connectionString: connectionString,\n});\n\n// Test the database connection\nexport async function testConnection() {\n  try {\n    const client = await pool.connect();\n    const result = await client.query('SELECT NOW()');\n    client.release();\n    console.log('Database connected successfully:', result.rows[0]);\n    return true;\n  } catch (error) {\n    console.error('Database connection failed:', error);\n    return false;\n  }\n}\n\n// Execute a query with error handling\nexport async function query(text, params) {\n  if (!connectionString) {\n    throw new Error('Database connection string not configured. Please set DATABASE_URL environment variable.');\n  }\n  \n  const client = await pool.connect();\n  try {\n    const result = await client.query(text, params);\n    return result;\n  } catch (error) {\n    console.error('Database query error:', error);\n    console.error('Query:', text);\n    console.error('Params:', params);\n    throw error;\n  } finally {\n    client.release();\n  }\n}\n\n// Initialize database schema\nexport async function initDatabase() {\n  try {\n    // Check if database is configured\n    if (!connectionString) {\n      throw new Error('Database connection string not configured. Please set DATABASE_URL environment variable.');\n    }\n\n    console.log('🔍 Checking database connection...');\n    const connected = await testConnection();\n    if (!connected) {\n      throw new Error('Database connection failed');\n    }\n\n    console.log('📋 Initializing database schema...');\n    \n    // Create users table first\n    console.log('   Creating users table...');\n    await query(`\n      CREATE TABLE IF NOT EXISTS users (\n        id SERIAL PRIMARY KEY,\n        email VARCHAR(255) UNIQUE NOT NULL,\n        password_hash VARCHAR(255) NOT NULL,\n        first_name VARCHAR(100) NOT NULL,\n        last_name VARCHAR(100) NOT NULL,\n        role VARCHAR(50) NOT NULL,\n        license_number VARCHAR(100),\n        is_active BOOLEAN DEFAULT true,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n    console.log('   ✅ Users table created');\n\n    // Create sessions table for JWT session management\n    console.log('   Creating user_sessions table...');\n    await query(`\n      CREATE TABLE IF NOT EXISTS user_sessions (\n        id SERIAL PRIMARY KEY,\n        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,\n        session_token VARCHAR(255) UNIQUE NOT NULL,\n        expires_at TIMESTAMP NOT NULL,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n    console.log('   ✅ User sessions table created');\n\n    // Create patients table\n    console.log('   Creating patients table...');\n    await query(`\n      CREATE TABLE IF NOT EXISTS patients (\n        id SERIAL PRIMARY KEY,\n        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,\n        name VARCHAR(255) NOT NULL,\n        email VARCHAR(255),\n        phone VARCHAR(20),\n        date_of_birth DATE,\n        diagnosis TEXT,\n        medical_history TEXT,\n        emergency_contact VARCHAR(255),\n        emergency_phone VARCHAR(20),\n        therapist VARCHAR(255),\n        total_sessions INTEGER DEFAULT 12,\n        sessions_completed INTEGER DEFAULT 0,\n        status VARCHAR(50) DEFAULT 'active',\n        notes TEXT,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n    console.log('   ✅ Patients table created');\n\n    // Create patient_users table for patient authentication\n    console.log('   Creating patient_users table...');\n    await query(`\n      CREATE TABLE IF NOT EXISTS patient_users (\n        id SERIAL PRIMARY KEY,\n        patient_id INTEGER REFERENCES patients(id) ON DELETE CASCADE,\n        username VARCHAR(50) UNIQUE NOT NULL,\n        password_hash VARCHAR(255) NOT NULL,\n        is_active BOOLEAN DEFAULT true,\n        last_login TIMESTAMP,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        idol TEXT,\n        personality TEXT,\n        goals TEXT,\n        challenges TEXT,\n        communication_style TEXT,\n        interests TEXT,\n        values TEXT,\n        support_needs TEXT\n      )\n    `);\n    console.log('   ✅ Patient users table created');\n\n    // Create indexes for better performance\n    console.log('   Creating indexes...');\n    try {\n      await query(`CREATE INDEX IF NOT EXISTS idx_users_email ON users(email)`);\n      await query(`CREATE INDEX IF NOT EXISTS idx_sessions_token ON user_sessions(session_token)`);\n      await query(`CREATE INDEX IF NOT EXISTS idx_patients_user_id ON patients(user_id)`);\n      await query(`CREATE INDEX IF NOT EXISTS idx_patient_users_username ON patient_users(username)`);\n      await query(`CREATE INDEX IF NOT EXISTS idx_patient_users_patient_id ON patient_users(patient_id)`);\n      console.log('   ✅ Indexes created');\n    } catch (indexError) {\n      console.log('   ⚠️  Some indexes may already exist:', indexError.message);\n    }\n\n    console.log('✅ Database schema initialized successfully');\n    return true;\n  } catch (error) {\n    console.error('❌ Database initialization failed:', error);\n    console.error('Error details:', {\n      message: error.message,\n      code: error.code,\n      detail: error.detail\n    });\n    throw error;\n  }\n}\n\nexport default pool;\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;;;AAEA,6BAA6B;AAC7B,kJAAM,CAAC,MAAM,CAAC;IAAE,MAAM;AAAa;AAEnC,iCAAiC;AACjC,MAAM,mBAAmB,QAAQ,GAAG,CAAC,YAAY,IAAI,QAAQ,GAAG,CAAC,iBAAiB;AAElF,IAAI,CAAC,kBAAkB;IACrB,QAAQ,KAAK,CAAC;IACd,QAAQ,KAAK,CAAC;IACd,QAAQ,KAAK,CAAC;AAChB;AAEA,2BAA2B;AAC3B,MAAM,OAAO,IAAI,gKAAI,CAAC;IACpB,kBAAkB;AACpB;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,KAAK,OAAO;QACjC,MAAM,SAAS,MAAM,OAAO,KAAK,CAAC;QAClC,OAAO,OAAO;QACd,QAAQ,GAAG,CAAC,oCAAoC,OAAO,IAAI,CAAC,EAAE;QAC9D,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO;IACT;AACF;AAGO,eAAe,MAAM,IAAI,EAAE,MAAM;IACtC,IAAI,CAAC,kBAAkB;QACrB,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,SAAS,MAAM,KAAK,OAAO;IACjC,IAAI;QACF,MAAM,SAAS,MAAM,OAAO,KAAK,CAAC,MAAM;QACxC,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,QAAQ,KAAK,CAAC,UAAU;QACxB,QAAQ,KAAK,CAAC,WAAW;QACzB,MAAM;IACR,SAAU;QACR,OAAO,OAAO;IAChB;AACF;AAGO,eAAe;IACpB,IAAI;QACF,kCAAkC;QAClC,IAAI,CAAC,kBAAkB;YACrB,MAAM,IAAI,MAAM;QAClB;QAEA,QAAQ,GAAG,CAAC;QACZ,MAAM,YAAY,MAAM;QACxB,IAAI,CAAC,WAAW;YACd,MAAM,IAAI,MAAM;QAClB;QAEA,QAAQ,GAAG,CAAC;QAEZ,2BAA2B;QAC3B,QAAQ,GAAG,CAAC;QACZ,MAAM,MAAM,CAAC;;;;;;;;;;;;;IAab,CAAC;QACD,QAAQ,GAAG,CAAC;QAEZ,mDAAmD;QACnD,QAAQ,GAAG,CAAC;QACZ,MAAM,MAAM,CAAC;;;;;;;;IAQb,CAAC;QACD,QAAQ,GAAG,CAAC;QAEZ,wBAAwB;QACxB,QAAQ,GAAG,CAAC;QACZ,MAAM,MAAM,CAAC;;;;;;;;;;;;;;;;;;;;IAoBb,CAAC;QACD,QAAQ,GAAG,CAAC;QAEZ,wDAAwD;QACxD,QAAQ,GAAG,CAAC;QACZ,MAAM,MAAM,CAAC;;;;;;;;;;;;;;;;;;;IAmBb,CAAC;QACD,QAAQ,GAAG,CAAC;QAEZ,wCAAwC;QACxC,QAAQ,GAAG,CAAC;QACZ,IAAI;YACF,MAAM,MAAM,CAAC,0DAA0D,CAAC;YACxE,MAAM,MAAM,CAAC,6EAA6E,CAAC;YAC3F,MAAM,MAAM,CAAC,oEAAoE,CAAC;YAClF,MAAM,MAAM,CAAC,gFAAgF,CAAC;YAC9F,MAAM,MAAM,CAAC,oFAAoF,CAAC;YAClG,QAAQ,GAAG,CAAC;QACd,EAAE,OAAO,YAAY;YACnB,QAAQ,GAAG,CAAC,0CAA0C,WAAW,OAAO;QAC1E;QAEA,QAAQ,GAAG,CAAC;QACZ,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,QAAQ,KAAK,CAAC,kBAAkB;YAC9B,SAAS,MAAM,OAAO;YACtB,MAAM,MAAM,IAAI;YAChB,QAAQ,MAAM,MAAM;QACtB;QACA,MAAM;IACR;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 254, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/erpai/projects/UI/luminate-clinician/src/lib/patientAuth.js"],"sourcesContent":["import bcrypt from 'bcryptjs';\r\nimport { query } from './db.js';\r\n\r\n// Generate unique username for patient\r\nexport const generatePatientUsername = async (patientName, patientId) => {\r\n  // Create base username from patient name\r\n  const baseName = patientName\r\n    .toLowerCase()\r\n    .replace(/[^a-z0-9]/g, '')\r\n    .substring(0, 8);\r\n  \r\n  let username = baseName;\r\n  let counter = 1;\r\n  \r\n  // Check if username exists and make it unique\r\n  while (true) {\r\n    const result = await query(\r\n      'SELECT id FROM patient_users WHERE username = $1',\r\n      [username]\r\n    );\r\n    \r\n    if (result.rows.length === 0) {\r\n      break; // Username is unique\r\n    }\r\n    \r\n    username = `${baseName}${counter}`;\r\n    counter++;\r\n  }\r\n  \r\n  return username;\r\n};\r\n\r\n// Generate secure password\r\nexport const generatePatientPassword = () => {\r\n  const length = 12;\r\n  const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*';\r\n  let password = '';\r\n  \r\n  // Ensure at least one character from each category\r\n  const lowercase = 'abcdefghijklmnopqrstuvwxyz';\r\n  const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n  const numbers = '0123456789';\r\n  const symbols = '!@#$%^&*';\r\n  \r\n  password += lowercase[Math.floor(Math.random() * lowercase.length)];\r\n  password += uppercase[Math.floor(Math.random() * uppercase.length)];\r\n  password += numbers[Math.floor(Math.random() * numbers.length)];\r\n  password += symbols[Math.floor(Math.random() * symbols.length)];\r\n  \r\n  // Fill the rest randomly\r\n  for (let i = 4; i < length; i++) {\r\n    password += charset[Math.floor(Math.random() * charset.length)];\r\n  }\r\n  \r\n  // Shuffle the password\r\n  return password.split('').sort(() => Math.random() - 0.5).join('');\r\n};\r\n\r\n// Create patient user account\r\nexport const createPatientUser = async (patientId, patientName, additionalFields = {}) => {\r\n  try {\r\n    // Generate credentials\r\n    const username = await generatePatientUsername(patientName, patientId);\r\n    const password = generatePatientPassword();\r\n    \r\n    // Hash the password\r\n    const saltRounds = 12;\r\n    const passwordHash = await bcrypt.hash(password, saltRounds);\r\n    \r\n    // Insert into patient_users table with additional fields\r\n    const result = await query(\r\n      `INSERT INTO patient_users (\r\n        patient_id, username, password_hash, \r\n        idol, personality, goals, challenges, \r\n        communication_style, interests, values, support_needs\r\n      )\r\n       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)\r\n       RETURNING id, username, created_at`,\r\n      [\r\n        patientId, \r\n        username, \r\n        passwordHash,\r\n        additionalFields.idol || null,\r\n        additionalFields.personality || null,\r\n        additionalFields.goals || null,\r\n        additionalFields.challenges || null,\r\n        additionalFields.communicationStyle || null,\r\n        additionalFields.interests || null,\r\n        additionalFields.values || null,\r\n        additionalFields.supportNeeds || null\r\n      ]\r\n    );\r\n    \r\n    const patientUser = result.rows[0];\r\n    \r\n    return {\r\n      success: true,\r\n      patientUser: {\r\n        id: patientUser.id,\r\n        patientId: patientId,\r\n        username: username,\r\n        password: password, // Return plain password for email\r\n        createdAt: patientUser.created_at,\r\n        ...additionalFields\r\n      }\r\n    };\r\n  } catch (error) {\r\n    console.error('Error creating patient user:', error);\r\n    return {\r\n      success: false,\r\n      error: error.message\r\n    };\r\n  }\r\n};\r\n\r\n// Authenticate patient user\r\nexport const authenticatePatient = async (username, password) => {\r\n  try {\r\n    // Get patient user with patient details and additional fields\r\n    const result = await query(\r\n      `SELECT \r\n        pu.id, pu.patient_id, pu.username, pu.password_hash, pu.is_active,\r\n        pu.idol, pu.personality, pu.goals, pu.challenges, \r\n        pu.communication_style, pu.interests, pu.values, pu.support_needs,\r\n        p.name, p.email, p.diagnosis, p.therapist, p.total_sessions, p.sessions_completed\r\n       FROM patient_users pu\r\n       JOIN patients p ON pu.patient_id = p.id\r\n       WHERE pu.username = $1 AND pu.is_active = true`,\r\n      [username]\r\n    );\r\n    \r\n    if (result.rows.length === 0) {\r\n      return { success: false, error: 'Invalid credentials' };\r\n    }\r\n    \r\n    const patientUser = result.rows[0];\r\n    \r\n    // Verify password\r\n    const isValidPassword = await bcrypt.compare(password, patientUser.password_hash);\r\n    \r\n    if (!isValidPassword) {\r\n      return { success: false, error: 'Invalid credentials' };\r\n    }\r\n    \r\n    // Update last login\r\n    await query(\r\n      'UPDATE patient_users SET last_login = CURRENT_TIMESTAMP WHERE id = $1',\r\n      [patientUser.id]\r\n    );\r\n    \r\n    return {\r\n      success: true,\r\n      patient: {\r\n        id: patientUser.patient_id,\r\n        name: patientUser.name,\r\n        email: patientUser.email,\r\n        diagnosis: patientUser.diagnosis,\r\n        therapist: patientUser.therapist,\r\n        totalSessions: patientUser.total_sessions,\r\n        sessionsCompleted: patientUser.sessions_completed\r\n      },\r\n      user: {\r\n        id: patientUser.id,\r\n        username: patientUser.username,\r\n        idol: patientUser.idol,\r\n        personality: patientUser.personality,\r\n        goals: patientUser.goals,\r\n        challenges: patientUser.challenges,\r\n        communicationStyle: patientUser.communication_style,\r\n        interests: patientUser.interests,\r\n        values: patientUser.values,\r\n        supportNeeds: patientUser.support_needs\r\n      }\r\n    };\r\n  } catch (error) {\r\n    console.error('Error authenticating patient:', error);\r\n    return {\r\n      success: false,\r\n      error: 'Authentication failed'\r\n    };\r\n  }\r\n};\r\n\r\n// Get patient user by patient ID\r\nexport const getPatientUserByPatientId = async (patientId) => {\r\n  try {\r\n    const result = await query(\r\n      `SELECT pu.id, pu.username, pu.is_active, pu.last_login, pu.created_at\r\n       FROM patient_users pu\r\n       WHERE pu.patient_id = $1`,\r\n      [patientId]\r\n    );\r\n    \r\n    if (result.rows.length === 0) {\r\n      return { success: false, error: 'Patient user not found' };\r\n    }\r\n    \r\n    return {\r\n      success: true,\r\n      patientUser: result.rows[0]\r\n    };\r\n  } catch (error) {\r\n    console.error('Error getting patient user:', error);\r\n    return {\r\n      success: false,\r\n      error: error.message\r\n    };\r\n  }\r\n};\r\n\r\n// Update patient password\r\nexport const updatePatientPassword = async (patientUserId, newPassword) => {\r\n  try {\r\n    const saltRounds = 12;\r\n    const passwordHash = await bcrypt.hash(newPassword, saltRounds);\r\n    \r\n    await query(\r\n      'UPDATE patient_users SET password_hash = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2',\r\n      [passwordHash, patientUserId]\r\n    );\r\n    \r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error('Error updating patient password:', error);\r\n    return {\r\n      success: false,\r\n      error: error.message\r\n    };\r\n  }\r\n};\r\n\r\n// Deactivate patient user\r\nexport const deactivatePatientUser = async (patientUserId) => {\r\n  try {\r\n    await query(\r\n      'UPDATE patient_users SET is_active = false, updated_at = CURRENT_TIMESTAMP WHERE id = $1',\r\n      [patientUserId]\r\n    );\r\n    \r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error('Error deactivating patient user:', error);\r\n    return {\r\n      success: false,\r\n      error: error.message\r\n    };\r\n  }\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 506, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/erpai/projects/UI/luminate-clinician/src/app/api/patient-auth/login/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { authenticatePatient } from '@/lib/patientAuth';\r\nimport jwt from 'jsonwebtoken';\r\n\r\n// Patient login endpoint\r\nexport async function POST(request) {\r\n  try {\r\n    const body = await request.json();\r\n    const { username, password } = body;\r\n\r\n    // Validate input\r\n    if (!username || !password) {\r\n      return NextResponse.json(\r\n        { error: 'Username and password are required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Authenticate patient\r\n    const authResult = await authenticatePatient(username, password);\r\n\r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { error: authResult.error },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Create JWT token for patient\r\n    const token = jwt.sign(\r\n      {\r\n        patientId: authResult.patient.id,\r\n        userId: authResult.user.id,\r\n        username: authResult.user.username,\r\n        type: 'patient'\r\n      },\r\n      process.env.JWT_SECRET,\r\n      { expiresIn: '7d' }\r\n    );\r\n\r\n    // Set secure HTTP-only cookie\r\n    const response = NextResponse.json({\r\n      success: true,\r\n      message: 'Login successful',\r\n      patient: authResult.patient,\r\n      user: authResult.user\r\n    });\r\n\r\n    response.cookies.set('patient_token', token, {\r\n      httpOnly: true,\r\n      secure: process.env.NODE_ENV === 'production',\r\n      sameSite: 'strict',\r\n      maxAge: 7 * 24 * 60 * 60 * 1000 // 7 days\r\n    });\r\n\r\n    return response;\r\n\r\n  } catch (error) {\r\n    console.error('Patient login error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAGO,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG;QAE/B,iBAAiB;QACjB,IAAI,CAAC,YAAY,CAAC,UAAU;YAC1B,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAqC,GAC9C;gBAAE,QAAQ;YAAI;QAElB;QAEA,uBAAuB;QACvB,MAAM,aAAa,MAAM,IAAA,kJAAmB,EAAC,UAAU;QAEvD,IAAI,CAAC,WAAW,OAAO,EAAE;YACvB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,WAAW,KAAK;YAAC,GAC1B;gBAAE,QAAQ;YAAI;QAElB;QAEA,+BAA+B;QAC/B,MAAM,QAAQ,kJAAG,CAAC,IAAI,CACpB;YACE,WAAW,WAAW,OAAO,CAAC,EAAE;YAChC,QAAQ,WAAW,IAAI,CAAC,EAAE;YAC1B,UAAU,WAAW,IAAI,CAAC,QAAQ;YAClC,MAAM;QACR,GACA,QAAQ,GAAG,CAAC,UAAU,EACtB;YAAE,WAAW;QAAK;QAGpB,8BAA8B;QAC9B,MAAM,WAAW,gJAAY,CAAC,IAAI,CAAC;YACjC,SAAS;YACT,SAAS;YACT,SAAS,WAAW,OAAO;YAC3B,MAAM,WAAW,IAAI;QACvB;QAEA,SAAS,OAAO,CAAC,GAAG,CAAC,iBAAiB,OAAO;YAC3C,UAAU;YACV,QAAQ,oDAAyB;YACjC,UAAU;YACV,QAAQ,IAAI,KAAK,KAAK,KAAK,KAAK,SAAS;QAC3C;QAEA,OAAO;IAET,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}