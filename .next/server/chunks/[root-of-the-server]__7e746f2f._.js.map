{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/erpai/projects/UI/luminate-clinician/src/lib/db.js"],"sourcesContent":["import { Pool } from '@neondatabase/serverless';\r\nimport dotenv from 'dotenv';\r\n\r\n// Load environment variables\r\ndotenv.config({ path: '.env.local' });\r\n\r\n// Get database connection string\r\nconst connectionString = process.env.DATABASE_URL || process.env.NEON_DATABASE_URL;\r\n\r\nif (!connectionString) {\r\n  console.error('❌ DATABASE_URL environment variable is not set!');\r\n  console.error('Please set DATABASE_URL in your .env.local file with your Neon database connection string.');\r\n  console.error('Example: DATABASE_URL=postgresql://username:password@ep-xxx-xxx.us-east-1.aws.neon.tech/neondb?sslmode=require');\r\n}\r\n\r\n// Create a connection pool\r\nconst pool = new Pool({\r\n  connectionString: connectionString,\r\n});\r\n\r\n// Test the database connection\r\nexport async function testConnection() {\r\n  try {\r\n    const client = await pool.connect();\r\n    const result = await client.query('SELECT NOW()');\r\n    client.release();\r\n    console.log('Database connected successfully:', result.rows[0]);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Database connection failed:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Execute a query with error handling\r\nexport async function query(text, params) {\r\n  if (!connectionString) {\r\n    throw new Error('Database connection string not configured. Please set DATABASE_URL environment variable.');\r\n  }\r\n  \r\n  const client = await pool.connect();\r\n  try {\r\n    const result = await client.query(text, params);\r\n    return result;\r\n  } catch (error) {\r\n    console.error('Database query error:', error);\r\n    console.error('Query:', text);\r\n    console.error('Params:', params);\r\n    throw error;\r\n  } finally {\r\n    client.release();\r\n  }\r\n}\r\n\r\n// Initialize database schema\r\nexport async function initDatabase() {\r\n  try {\r\n    // Check if database is configured\r\n    if (!connectionString) {\r\n      throw new Error('Database connection string not configured. Please set DATABASE_URL environment variable.');\r\n    }\r\n\r\n    console.log('🔍 Checking database connection...');\r\n    const connected = await testConnection();\r\n    if (!connected) {\r\n      throw new Error('Database connection failed');\r\n    }\r\n\r\n    console.log('📋 Initializing database schema...');\r\n    \r\n    // Create users table first\r\n    console.log('   Creating users table...');\r\n    await query(`\r\n      CREATE TABLE IF NOT EXISTS users (\r\n        id SERIAL PRIMARY KEY,\r\n        email VARCHAR(255) UNIQUE NOT NULL,\r\n        password_hash VARCHAR(255) NOT NULL,\r\n        first_name VARCHAR(100) NOT NULL,\r\n        last_name VARCHAR(100) NOT NULL,\r\n        role VARCHAR(50) NOT NULL,\r\n        license_number VARCHAR(100),\r\n        is_active BOOLEAN DEFAULT true,\r\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n      )\r\n    `);\r\n    console.log('   ✅ Users table created');\r\n\r\n    // Create sessions table for JWT session management\r\n    console.log('   Creating user_sessions table...');\r\n    await query(`\r\n      CREATE TABLE IF NOT EXISTS user_sessions (\r\n        id SERIAL PRIMARY KEY,\r\n        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,\r\n        session_token VARCHAR(255) UNIQUE NOT NULL,\r\n        expires_at TIMESTAMP NOT NULL,\r\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n      )\r\n    `);\r\n    console.log('   ✅ User sessions table created');\r\n\r\n    // Create patients table\r\n    console.log('   Creating patients table...');\r\n    await query(`\r\n      CREATE TABLE IF NOT EXISTS patients (\r\n        id SERIAL PRIMARY KEY,\r\n        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,\r\n        name VARCHAR(255) NOT NULL,\r\n        email VARCHAR(255),\r\n        phone VARCHAR(20),\r\n        date_of_birth DATE,\r\n        diagnosis TEXT,\r\n        medical_history TEXT,\r\n        emergency_contact VARCHAR(255),\r\n        emergency_phone VARCHAR(20),\r\n        therapist VARCHAR(255),\r\n        total_sessions INTEGER DEFAULT 12,\r\n        sessions_completed INTEGER DEFAULT 0,\r\n        status VARCHAR(50) DEFAULT 'active',\r\n        notes TEXT,\r\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n      )\r\n    `);\r\n    console.log('   ✅ Patients table created');\r\n\r\n    // Create indexes for better performance\r\n    console.log('   Creating indexes...');\r\n    try {\r\n      await query(`CREATE INDEX IF NOT EXISTS idx_users_email ON users(email)`);\r\n      await query(`CREATE INDEX IF NOT EXISTS idx_sessions_token ON user_sessions(session_token)`);\r\n      await query(`CREATE INDEX IF NOT EXISTS idx_patients_user_id ON patients(user_id)`);\r\n      console.log('   ✅ Indexes created');\r\n    } catch (indexError) {\r\n      console.log('   ⚠️  Some indexes may already exist:', indexError.message);\r\n    }\r\n\r\n    console.log('✅ Database schema initialized successfully');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('❌ Database initialization failed:', error);\r\n    console.error('Error details:', {\r\n      message: error.message,\r\n      code: error.code,\r\n      detail: error.detail\r\n    });\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport default pool;\r\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;;;AAEA,6BAA6B;AAC7B,kJAAM,CAAC,MAAM,CAAC;IAAE,MAAM;AAAa;AAEnC,iCAAiC;AACjC,MAAM,mBAAmB,QAAQ,GAAG,CAAC,YAAY,IAAI,QAAQ,GAAG,CAAC,iBAAiB;AAElF,IAAI,CAAC,kBAAkB;IACrB,QAAQ,KAAK,CAAC;IACd,QAAQ,KAAK,CAAC;IACd,QAAQ,KAAK,CAAC;AAChB;AAEA,2BAA2B;AAC3B,MAAM,OAAO,IAAI,gKAAI,CAAC;IACpB,kBAAkB;AACpB;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,KAAK,OAAO;QACjC,MAAM,SAAS,MAAM,OAAO,KAAK,CAAC;QAClC,OAAO,OAAO;QACd,QAAQ,GAAG,CAAC,oCAAoC,OAAO,IAAI,CAAC,EAAE;QAC9D,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO;IACT;AACF;AAGO,eAAe,MAAM,IAAI,EAAE,MAAM;IACtC,IAAI,CAAC,kBAAkB;QACrB,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,SAAS,MAAM,KAAK,OAAO;IACjC,IAAI;QACF,MAAM,SAAS,MAAM,OAAO,KAAK,CAAC,MAAM;QACxC,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,QAAQ,KAAK,CAAC,UAAU;QACxB,QAAQ,KAAK,CAAC,WAAW;QACzB,MAAM;IACR,SAAU;QACR,OAAO,OAAO;IAChB;AACF;AAGO,eAAe;IACpB,IAAI;QACF,kCAAkC;QAClC,IAAI,CAAC,kBAAkB;YACrB,MAAM,IAAI,MAAM;QAClB;QAEA,QAAQ,GAAG,CAAC;QACZ,MAAM,YAAY,MAAM;QACxB,IAAI,CAAC,WAAW;YACd,MAAM,IAAI,MAAM;QAClB;QAEA,QAAQ,GAAG,CAAC;QAEZ,2BAA2B;QAC3B,QAAQ,GAAG,CAAC;QACZ,MAAM,MAAM,CAAC;;;;;;;;;;;;;IAab,CAAC;QACD,QAAQ,GAAG,CAAC;QAEZ,mDAAmD;QACnD,QAAQ,GAAG,CAAC;QACZ,MAAM,MAAM,CAAC;;;;;;;;IAQb,CAAC;QACD,QAAQ,GAAG,CAAC;QAEZ,wBAAwB;QACxB,QAAQ,GAAG,CAAC;QACZ,MAAM,MAAM,CAAC;;;;;;;;;;;;;;;;;;;;IAoBb,CAAC;QACD,QAAQ,GAAG,CAAC;QAEZ,wCAAwC;QACxC,QAAQ,GAAG,CAAC;QACZ,IAAI;YACF,MAAM,MAAM,CAAC,0DAA0D,CAAC;YACxE,MAAM,MAAM,CAAC,6EAA6E,CAAC;YAC3F,MAAM,MAAM,CAAC,oEAAoE,CAAC;YAClF,QAAQ,GAAG,CAAC;QACd,EAAE,OAAO,YAAY;YACnB,QAAQ,GAAG,CAAC,0CAA0C,WAAW,OAAO;QAC1E;QAEA,QAAQ,GAAG,CAAC;QACZ,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,QAAQ,KAAK,CAAC,kBAAkB;YAC9B,SAAS,MAAM,OAAO;YACtB,MAAM,MAAM,IAAI;YAChB,QAAQ,MAAM,MAAM;QACtB;QACA,MAAM;IACR;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/erpai/projects/UI/luminate-clinician/src/lib/auth.js"],"sourcesContent":["import bcrypt from 'bcryptjs';\r\nimport { query } from './db.js';\r\n\r\n// Hash password\r\nexport async function hashPassword(password) {\r\n  const saltRounds = 12;\r\n  return await bcrypt.hash(password, saltRounds);\r\n}\r\n\r\n// Verify password\r\nexport async function verifyPassword(password, hashedPassword) {\r\n  return await bcrypt.compare(password, hashedPassword);\r\n}\r\n\r\n// Generate a simple session token (in production, use a proper JWT library)\r\nexport function generateSessionToken() {\r\n  return Math.random().toString(36).substring(2) + Date.now().toString(36);\r\n}\r\n\r\n// Create user session\r\nexport async function createUserSession(userId) {\r\n  const sessionToken = generateSessionToken();\r\n  const expiresAt = new Date();\r\n  expiresAt.setDate(expiresAt.getDate() + 7); // 7 days from now\r\n\r\n  await query(\r\n    'INSERT INTO user_sessions (user_id, session_token, expires_at) VALUES ($1, $2, $3)',\r\n    [userId, sessionToken, expiresAt]\r\n  );\r\n\r\n  return sessionToken;\r\n}\r\n\r\n// Get user by session token\r\nexport async function getUserBySession(sessionToken) {\r\n  const result = await query(\r\n    `SELECT u.*, s.expires_at \r\n     FROM users u \r\n     JOIN user_sessions s ON u.id = s.user_id \r\n     WHERE s.session_token = $1 AND s.expires_at > NOW() AND u.is_active = true`,\r\n    [sessionToken]\r\n  );\r\n\r\n  return result.rows[0] || null;\r\n}\r\n\r\n// Clean up expired sessions\r\nexport async function cleanupExpiredSessions() {\r\n  await query('DELETE FROM user_sessions WHERE expires_at < NOW()');\r\n}\r\n\r\n// Get user by email\r\nexport async function getUserByEmail(email) {\r\n  const result = await query(\r\n    'SELECT * FROM users WHERE email = $1 AND is_active = true',\r\n    [email]\r\n  );\r\n  return result.rows[0] || null;\r\n}\r\n\r\n// Create new user\r\nexport async function createUser(userData) {\r\n  const { firstName, lastName, email, password, role, licenseNumber } = userData;\r\n  \r\n  const passwordHash = await hashPassword(password);\r\n  \r\n  const result = await query(\r\n    `INSERT INTO users (first_name, last_name, email, password_hash, role, license_number) \r\n     VALUES ($1, $2, $3, $4, $5, $6) \r\n     RETURNING id, first_name, last_name, email, role, created_at`,\r\n    [firstName, lastName, email, passwordHash, role, licenseNumber || null]\r\n  );\r\n\r\n  return result.rows[0];\r\n}\r\n\r\n// Validate user credentials\r\nexport async function validateUser(email, password) {\r\n  const user = await getUserByEmail(email);\r\n  if (!user) {\r\n    return null;\r\n  }\r\n\r\n  const isValidPassword = await verifyPassword(password, user.password_hash);\r\n  if (!isValidPassword) {\r\n    return null;\r\n  }\r\n\r\n  // Return user without password hash\r\n  const { password_hash, ...userWithoutPassword } = user;\r\n  return userWithoutPassword;\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;;;AAGO,eAAe,aAAa,QAAQ;IACzC,MAAM,aAAa;IACnB,OAAO,MAAM,8IAAM,CAAC,IAAI,CAAC,UAAU;AACrC;AAGO,eAAe,eAAe,QAAQ,EAAE,cAAc;IAC3D,OAAO,MAAM,8IAAM,CAAC,OAAO,CAAC,UAAU;AACxC;AAGO,SAAS;IACd,OAAO,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,KAAK,KAAK,GAAG,GAAG,QAAQ,CAAC;AACvE;AAGO,eAAe,kBAAkB,MAAM;IAC5C,MAAM,eAAe;IACrB,MAAM,YAAY,IAAI;IACtB,UAAU,OAAO,CAAC,UAAU,OAAO,KAAK,IAAI,kBAAkB;IAE9D,MAAM,IAAA,2HAAK,EACT,sFACA;QAAC;QAAQ;QAAc;KAAU;IAGnC,OAAO;AACT;AAGO,eAAe,iBAAiB,YAAY;IACjD,MAAM,SAAS,MAAM,IAAA,2HAAK,EACxB,CAAC;;;+EAG0E,CAAC,EAC5E;QAAC;KAAa;IAGhB,OAAO,OAAO,IAAI,CAAC,EAAE,IAAI;AAC3B;AAGO,eAAe;IACpB,MAAM,IAAA,2HAAK,EAAC;AACd;AAGO,eAAe,eAAe,KAAK;IACxC,MAAM,SAAS,MAAM,IAAA,2HAAK,EACxB,6DACA;QAAC;KAAM;IAET,OAAO,OAAO,IAAI,CAAC,EAAE,IAAI;AAC3B;AAGO,eAAe,WAAW,QAAQ;IACvC,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG;IAEtE,MAAM,eAAe,MAAM,aAAa;IAExC,MAAM,SAAS,MAAM,IAAA,2HAAK,EACxB,CAAC;;iEAE4D,CAAC,EAC9D;QAAC;QAAW;QAAU;QAAO;QAAc;QAAM,iBAAiB;KAAK;IAGzE,OAAO,OAAO,IAAI,CAAC,EAAE;AACvB;AAGO,eAAe,aAAa,KAAK,EAAE,QAAQ;IAChD,MAAM,OAAO,MAAM,eAAe;IAClC,IAAI,CAAC,MAAM;QACT,OAAO;IACT;IAEA,MAAM,kBAAkB,MAAM,eAAe,UAAU,KAAK,aAAa;IACzE,IAAI,CAAC,iBAAiB;QACpB,OAAO;IACT;IAEA,oCAAoC;IACpC,MAAM,EAAE,aAAa,EAAE,GAAG,qBAAqB,GAAG;IAClD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 390, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/erpai/projects/UI/luminate-clinician/src/lib/email.js"],"sourcesContent":["import nodemailer from 'nodemailer';\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config({ path: '.env.local' });\r\n\r\n// Email configuration\r\nconst createTransporter = () => {\r\n  // For development, we'll use Gmail SMTP\r\n  // In production, you might want to use SendGrid, AWS SES, or other services\r\n  return nodemailer.createTransport({\r\n    service: 'gmail',\r\n    auth: {\r\n      user: process.env.EMAIL_USER,\r\n      pass: process.env.EMAIL_APP_PASSWORD, // Use App Password for Gmail\r\n    },\r\n  });\r\n};\r\n\r\n// Welcome email template\r\nexport const createWelcomeEmailTemplate = (patient) => {\r\n  const { name, email, therapist, totalSessions } = patient;\r\n  \r\n  return {\r\n    from: `\"Luminate Clinician\" <${process.env.EMAIL_USER}>`,\r\n    to: email,\r\n    subject: `Welcome to Luminate Clinician - Your Treatment Journey Begins!`,\r\n    html: `\r\n      <!DOCTYPE html>\r\n      <html lang=\"en\">\r\n      <head>\r\n        <meta charset=\"UTF-8\">\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n        <title>Welcome to Luminate Clinician</title>\r\n        <style>\r\n          body {\r\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n            line-height: 1.6;\r\n            color: #333;\r\n            max-width: 600px;\r\n            margin: 0 auto;\r\n            padding: 20px;\r\n            background-color: #f8fafc;\r\n          }\r\n          .container {\r\n            background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);\r\n            border-radius: 20px;\r\n            padding: 40px;\r\n            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\r\n          }\r\n          .header {\r\n            text-align: center;\r\n            margin-bottom: 30px;\r\n          }\r\n          .logo {\r\n            font-size: 32px;\r\n            font-weight: bold;\r\n            background: linear-gradient(135deg, #06b6d4, #10b981);\r\n            -webkit-background-clip: text;\r\n            -webkit-text-fill-color: transparent;\r\n            background-clip: text;\r\n            margin-bottom: 10px;\r\n          }\r\n          .welcome-title {\r\n            color: #ffffff;\r\n            font-size: 28px;\r\n            margin-bottom: 10px;\r\n            font-weight: 600;\r\n          }\r\n          .welcome-subtitle {\r\n            color: #94a3b8;\r\n            font-size: 16px;\r\n            margin-bottom: 30px;\r\n          }\r\n          .content {\r\n            background: rgba(255, 255, 255, 0.05);\r\n            border-radius: 15px;\r\n            padding: 30px;\r\n            margin-bottom: 30px;\r\n            border: 1px solid rgba(255, 255, 255, 0.1);\r\n          }\r\n          .greeting {\r\n            color: #ffffff;\r\n            font-size: 18px;\r\n            margin-bottom: 20px;\r\n          }\r\n          .info-section {\r\n            background: rgba(6, 182, 212, 0.1);\r\n            border-radius: 10px;\r\n            padding: 20px;\r\n            margin: 20px 0;\r\n            border-left: 4px solid #06b6d4;\r\n          }\r\n          .info-title {\r\n            color: #06b6d4;\r\n            font-weight: 600;\r\n            margin-bottom: 10px;\r\n            font-size: 16px;\r\n          }\r\n          .info-text {\r\n            color: #e2e8f0;\r\n            margin-bottom: 8px;\r\n          }\r\n          .cta-button {\r\n            display: inline-block;\r\n            background: linear-gradient(135deg, #06b6d4, #10b981);\r\n            color: white;\r\n            padding: 15px 30px;\r\n            text-decoration: none;\r\n            border-radius: 10px;\r\n            font-weight: 600;\r\n            text-align: center;\r\n            margin: 20px 0;\r\n            transition: transform 0.3s ease;\r\n          }\r\n          .cta-button:hover {\r\n            transform: translateY(-2px);\r\n          }\r\n          .footer {\r\n            text-align: center;\r\n            color: #64748b;\r\n            font-size: 14px;\r\n            margin-top: 30px;\r\n            padding-top: 20px;\r\n            border-top: 1px solid rgba(255, 255, 255, 0.1);\r\n          }\r\n          .highlight {\r\n            color: #06b6d4;\r\n            font-weight: 600;\r\n          }\r\n        </style>\r\n      </head>\r\n      <body>\r\n        <div class=\"container\">\r\n          <div class=\"header\">\r\n            <div class=\"logo\">Luminate Clinician</div>\r\n            <h1 class=\"welcome-title\">Welcome to Your Treatment Journey!</h1>\r\n            <p class=\"welcome-subtitle\">Your personalized healthcare experience starts now</p>\r\n          </div>\r\n          \r\n          <div class=\"content\">\r\n            <p class=\"greeting\">Dear <span class=\"highlight\">${name}</span>,</p>\r\n            \r\n            <p style=\"color: #e2e8f0; margin-bottom: 20px;\">\r\n              Welcome to Luminate Clinician! We're thrilled to have you as part of our healthcare family. \r\n              Your treatment journey has been carefully planned and personalized just for you.\r\n            </p>\r\n            \r\n            <div class=\"info-section\">\r\n              <div class=\"info-title\">📋 Your Treatment Details</div>\r\n              <div class=\"info-text\"><strong>Therapist:</strong> ${therapist || 'To be assigned'}</div>\r\n              <div class=\"info-text\"><strong>Total Sessions:</strong> ${totalSessions || 'To be determined'}</div>\r\n              <div class=\"info-text\"><strong>Status:</strong> <span class=\"highlight\">Ready to Begin</span></div>\r\n            </div>\r\n            \r\n            <p style=\"color: #e2e8f0; margin: 20px 0;\">\r\n              Our team is committed to providing you with the highest quality care and support throughout your treatment. \r\n              You'll receive regular updates about your progress and any important information about your sessions.\r\n            </p>\r\n            \r\n            <div style=\"text-align: center; margin: 30px 0;\">\r\n              <a href=\"#\" class=\"cta-button\">Access Your Patient Portal</a>\r\n            </div>\r\n            \r\n            <p style=\"color: #e2e8f0; font-size: 14px; margin-top: 20px;\">\r\n              If you have any questions or need assistance, please don't hesitate to contact our support team. \r\n              We're here to help you every step of the way.\r\n            </p>\r\n          </div>\r\n          \r\n          <div class=\"footer\">\r\n            <p>© 2024 Luminate Clinician. All rights reserved.</p>\r\n            <p>This email was sent to ${email}. If you believe this is an error, please contact us.</p>\r\n          </div>\r\n        </div>\r\n      </body>\r\n      </html>\r\n    `,\r\n    text: `\r\n      Welcome to Luminate Clinician!\r\n      \r\n      Dear ${name},\r\n      \r\n      Welcome to Luminate Clinician! We're thrilled to have you as part of our healthcare family. \r\n      Your treatment journey has been carefully planned and personalized just for you.\r\n      \r\n      Your Treatment Details:\r\n      - Therapist: ${therapist || 'To be assigned'}\r\n      - Total Sessions: ${totalSessions || 'To be determined'}\r\n      - Status: Ready to Begin\r\n      \r\n      Our team is committed to providing you with the highest quality care and support throughout your treatment. \r\n      You'll receive regular updates about your progress and any important information about your sessions.\r\n      \r\n      If you have any questions or need assistance, please don't hesitate to contact our support team. \r\n      We're here to help you every step of the way.\r\n      \r\n      Best regards,\r\n      The Luminate Clinician Team\r\n      \r\n      © 2024 Luminate Clinician. All rights reserved.\r\n    `\r\n  };\r\n};\r\n\r\n// Send welcome email\r\nexport const sendWelcomeEmail = async (patient) => {\r\n  try {\r\n    // Check if email configuration is available\r\n    if (!process.env.EMAIL_USER || !process.env.EMAIL_APP_PASSWORD) {\r\n      console.warn('Email configuration missing. Skipping email send.');\r\n      console.log('EMAIL_USER:', process.env.EMAIL_USER ? 'Set' : 'Missing');\r\n      console.log('EMAIL_APP_PASSWORD:', process.env.EMAIL_APP_PASSWORD ? 'Set' : 'Missing');\r\n      return { success: false, error: 'Email configuration missing' };\r\n    }\r\n\r\n    console.log('Attempting to send welcome email to:', patient.email);\r\n    const transporter = createTransporter();\r\n    const emailTemplate = createWelcomeEmailTemplate(patient);\r\n    \r\n    const result = await transporter.sendMail(emailTemplate);\r\n    console.log('Welcome email sent successfully:', result.messageId);\r\n    \r\n    return { \r\n      success: true, \r\n      messageId: result.messageId,\r\n      message: 'Welcome email sent successfully'\r\n    };\r\n  } catch (error) {\r\n    console.error('Error sending welcome email:', error);\r\n    console.error('Error details:', {\r\n      message: error.message,\r\n      code: error.code,\r\n      response: error.response\r\n    });\r\n    return { \r\n      success: false, \r\n      error: error.message,\r\n      message: 'Failed to send welcome email'\r\n    };\r\n  }\r\n};\r\n\r\n// Test email configuration\r\nexport const testEmailConfiguration = async () => {\r\n  try {\r\n    if (!process.env.EMAIL_USER || !process.env.EMAIL_APP_PASSWORD) {\r\n      return { success: false, error: 'Email configuration missing' };\r\n    }\r\n\r\n    const transporter = createTransporter();\r\n    await transporter.verify();\r\n    \r\n    return { success: true, message: 'Email configuration is valid' };\r\n  } catch (error) {\r\n    console.error('Email configuration test failed:', error);\r\n    return { success: false, error: error.message };\r\n  }\r\n};\r\n"],"names":[],"mappings":";;;;;;;;AAAA;AACA;;;AAEA,kJAAM,CAAC,MAAM,CAAC;IAAE,MAAM;AAAa;AAEnC,sBAAsB;AACtB,MAAM,oBAAoB;IACxB,wCAAwC;IACxC,4EAA4E;IAC5E,OAAO,4JAAU,CAAC,eAAe,CAAC;QAChC,SAAS;QACT,MAAM;YACJ,MAAM,QAAQ,GAAG,CAAC,UAAU;YAC5B,MAAM,QAAQ,GAAG,CAAC,kBAAkB;QACtC;IACF;AACF;AAGO,MAAM,6BAA6B,CAAC;IACzC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,aAAa,EAAE,GAAG;IAElD,OAAO;QACL,MAAM,CAAC,sBAAsB,EAAE,QAAQ,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;QACxD,IAAI;QACJ,SAAS,CAAC,8DAA8D,CAAC;QACzE,MAAM,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6DAkHkD,EAAE,KAAK;;;;;;;;;iEASH,EAAE,aAAa,iBAAiB;sEAC3B,EAAE,iBAAiB,mBAAmB;;;;;;;;;;;;;;;;;;;;;sCAqBtE,EAAE,MAAM;;;;;IAK1C,CAAC;QACD,MAAM,CAAC;;;WAGA,EAAE,KAAK;;;;;;mBAMC,EAAE,aAAa,iBAAiB;wBAC3B,EAAE,iBAAiB,mBAAmB;;;;;;;;;;;;;IAa1D,CAAC;IACH;AACF;AAGO,MAAM,mBAAmB,OAAO;IACrC,IAAI;QACF,4CAA4C;QAC5C,IAAI,CAAC,QAAQ,GAAG,CAAC,UAAU,IAAI,CAAC,QAAQ,GAAG,CAAC,kBAAkB,EAAE;YAC9D,QAAQ,IAAI,CAAC;YACb,QAAQ,GAAG,CAAC,eAAe,QAAQ,GAAG,CAAC,UAAU,GAAG,QAAQ;YAC5D,QAAQ,GAAG,CAAC,uBAAuB,QAAQ,GAAG,CAAC,kBAAkB,GAAG,QAAQ;YAC5E,OAAO;gBAAE,SAAS;gBAAO,OAAO;YAA8B;QAChE;QAEA,QAAQ,GAAG,CAAC,wCAAwC,QAAQ,KAAK;QACjE,MAAM,cAAc;QACpB,MAAM,gBAAgB,2BAA2B;QAEjD,MAAM,SAAS,MAAM,YAAY,QAAQ,CAAC;QAC1C,QAAQ,GAAG,CAAC,oCAAoC,OAAO,SAAS;QAEhE,OAAO;YACL,SAAS;YACT,WAAW,OAAO,SAAS;YAC3B,SAAS;QACX;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,QAAQ,KAAK,CAAC,kBAAkB;YAC9B,SAAS,MAAM,OAAO;YACtB,MAAM,MAAM,IAAI;YAChB,UAAU,MAAM,QAAQ;QAC1B;QACA,OAAO;YACL,SAAS;YACT,OAAO,MAAM,OAAO;YACpB,SAAS;QACX;IACF;AACF;AAGO,MAAM,yBAAyB;IACpC,IAAI;QACF,IAAI,CAAC,QAAQ,GAAG,CAAC,UAAU,IAAI,CAAC,QAAQ,GAAG,CAAC,kBAAkB,EAAE;YAC9D,OAAO;gBAAE,SAAS;gBAAO,OAAO;YAA8B;QAChE;QAEA,MAAM,cAAc;QACpB,MAAM,YAAY,MAAM;QAExB,OAAO;YAAE,SAAS;YAAM,SAAS;QAA+B;IAClE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oCAAoC;QAClD,OAAO;YAAE,SAAS;YAAO,OAAO,MAAM,OAAO;QAAC;IAChD;AACF","debugId":null}},
    {"offset": {"line": 662, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/erpai/projects/UI/luminate-clinician/src/app/api/patients/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { query } from '@/lib/db';\r\nimport { getUserBySession } from '@/lib/auth';\r\nimport { sendWelcomeEmail } from '@/lib/email';\r\n\r\n// GET - Fetch all patients for the authenticated user\r\nexport async function GET(request) {\r\n  try {\r\n    const sessionToken = request.cookies.get('session_token')?.value;\r\n\r\n    if (!sessionToken) {\r\n      return NextResponse.json(\r\n        { error: 'Not authenticated' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const user = await getUserBySession(sessionToken);\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { error: 'Invalid or expired session' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Get all patients for this user\r\n    const result = await query(\r\n      `SELECT * FROM patients \r\n       WHERE user_id = $1 \r\n       ORDER BY created_at DESC`,\r\n      [user.id]\r\n    );\r\n\r\n    return NextResponse.json({\r\n      patients: result.rows.map(patient => ({\r\n        id: patient.id,\r\n        name: patient.name,\r\n        email: patient.email,\r\n        phone: patient.phone,\r\n        dateOfBirth: patient.date_of_birth,\r\n        diagnosis: patient.diagnosis,\r\n        medicalHistory: patient.medical_history,\r\n        emergencyContact: patient.emergency_contact,\r\n        emergencyPhone: patient.emergency_phone,\r\n        therapist: patient.therapist,\r\n        totalSessions: patient.total_sessions,\r\n        sessionsCompleted: patient.sessions_completed,\r\n        status: patient.status,\r\n        notes: patient.notes,\r\n        createdAt: patient.created_at,\r\n        updatedAt: patient.updated_at\r\n      }))\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Get patients error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// POST - Create a new patient\r\nexport async function POST(request) {\r\n  try {\r\n    const sessionToken = request.cookies.get('session_token')?.value;\r\n\r\n    if (!sessionToken) {\r\n      return NextResponse.json(\r\n        { error: 'Not authenticated' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const user = await getUserBySession(sessionToken);\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { error: 'Invalid or expired session' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const body = await request.json();\r\n    const {\r\n      name,\r\n      email,\r\n      phone,\r\n      dateOfBirth,\r\n      diagnosis,\r\n      medicalHistory,\r\n      emergencyContact,\r\n      emergencyPhone,\r\n      therapist,\r\n      totalSessions,\r\n      notes\r\n    } = body;\r\n\r\n    // Validate required fields\r\n    if (!name || !diagnosis || !medicalHistory) {\r\n      return NextResponse.json(\r\n        { error: 'Name, diagnosis, and medical history are required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Create new patient\r\n    const result = await query(\r\n      `INSERT INTO patients (\r\n        user_id, name, email, phone, date_of_birth, diagnosis, \r\n        medical_history, emergency_contact, emergency_phone, \r\n        therapist, total_sessions, notes\r\n      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)\r\n      RETURNING *`,\r\n      [\r\n        user.id,\r\n        name,\r\n        email || null,\r\n        phone || null,\r\n        dateOfBirth || null,\r\n        diagnosis,\r\n        medicalHistory,\r\n        emergencyContact || null,\r\n        emergencyPhone || null,\r\n        therapist || user.first_name + ' ' + user.last_name,\r\n        totalSessions || 12,\r\n        notes || null\r\n      ]\r\n    );\r\n\r\n    const newPatient = result.rows[0];\r\n\r\n    // Prepare patient data for email\r\n    const patientForEmail = {\r\n      id: newPatient.id,\r\n      name: newPatient.name,\r\n      email: newPatient.email,\r\n      phone: newPatient.phone,\r\n      dateOfBirth: newPatient.date_of_birth,\r\n      diagnosis: newPatient.diagnosis,\r\n      medicalHistory: newPatient.medical_history,\r\n      emergencyContact: newPatient.emergency_contact,\r\n      emergencyPhone: newPatient.emergency_phone,\r\n      therapist: newPatient.therapist,\r\n      totalSessions: newPatient.total_sessions,\r\n      sessionsCompleted: newPatient.sessions_completed,\r\n      status: newPatient.status,\r\n      notes: newPatient.notes,\r\n      createdAt: newPatient.created_at,\r\n      updatedAt: newPatient.updated_at\r\n    };\r\n\r\n    // Send welcome email if patient has email\r\n    let emailResult = null;\r\n    if (newPatient.email) {\r\n      try {\r\n        emailResult = await sendWelcomeEmail(patientForEmail);\r\n        console.log('Email send result:', emailResult);\r\n      } catch (emailError) {\r\n        console.error('Email sending failed (non-blocking):', emailError);\r\n        // Don't fail the patient creation if email fails\r\n        emailResult = { success: false, error: emailError.message };\r\n      }\r\n    }\r\n\r\n    return NextResponse.json(\r\n      {\r\n        message: 'Patient created successfully',\r\n        patient: patientForEmail,\r\n        emailSent: emailResult?.success || false,\r\n        emailMessage: emailResult?.message || (newPatient.email ? 'Email sending failed' : 'No email provided')\r\n      },\r\n      { status: 201 }\r\n    );\r\n\r\n  } catch (error) {\r\n    console.error('Create patient error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}